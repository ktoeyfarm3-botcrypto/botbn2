import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
import hashlib
import hmac
import json
import time
import requests
import threading
from datetime import datetime, timedelta
import numpy as np
from collections import deque
import logging
import os
from urllib.parse import urlencode
import configparser

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö matplotlib
try:
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    from matplotlib.animation import FuncAnimation
    import matplotlib.dates as mdates
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    print("üìä Matplotlib ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏à‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")

class BitkubAPIClient:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Bitkub API ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    
    def __init__(self, api_key="", api_secret=""):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api.bitkub.com"
        
        # Rate limiting
        self.request_times = deque(maxlen=250)
        self.rate_limit_lock = threading.Lock()
        
        # Setup logging
        self.logger = logging.getLogger(__name__)
        
    def _wait_for_rate_limit(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Rate Limit"""
        with self.rate_limit_lock:
            now = time.time()
            
            # ‡∏•‡∏ö request ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            while self.request_times and (now - self.request_times[0]) > 10:
                self.request_times.popleft()
            
            # ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÉ‡∏´‡πâ‡∏£‡∏≠
            if len(self.request_times) >= 250:
                sleep_time = 10 - (now - self.request_times[0]) + 0.1
                if sleep_time > 0:
                    time.sleep(sleep_time)
                    self.request_times.clear()
            
            self.request_times.append(now)
    
    def _generate_signature(self, payload_string):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á HMAC Signature"""
        if not self.api_secret:
            raise ValueError("API Secret ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        return hmac.new(
            self.api_secret.encode('utf-8'),
            payload_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def _build_query_string(self, params):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Query String ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"""
        if not params:
            return ""
        
        filtered_params = {k: str(v) for k, v in params.items() if v is not None}
        return urlencode(filtered_params)
    
    def make_public_request(self, endpoint, params=None):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Public API"""
        try:
            self._wait_for_rate_limit()
            
            url = f"{self.base_url}{endpoint}"
            response = requests.get(url, params=params, timeout=10)
            response.raise_for_status()
            
            return response.json()
            
        except Exception as e:
            self.logger.error(f"Public API Error: {e}")
            return None
    
    def make_private_request(self, method, endpoint, params=None, body=None):
        """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Private API"""
        try:
            if not self.api_key or not self.api_secret:
                raise ValueError("API Credentials ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
            
            self._wait_for_rate_limit()
            
            ts = str(round(time.time() * 1000))
            url = f"{self.base_url}{endpoint}"
            payload_parts = [ts, method.upper(), endpoint]
            
            if method.upper() == 'GET' and params:
                query_string = self._build_query_string(params)
                if query_string:
                    payload_parts.append(f"?{query_string}")
                    url += f"?{query_string}"
            elif method.upper() == 'POST' and body:
                json_body = json.dumps(body, separators=(',', ':'))
                payload_parts.append(json_body)
            
            payload_string = ''.join(payload_parts)
            signature = self._generate_signature(payload_string)
            
            headers = {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-BTK-TIMESTAMP': ts,
                'X-BTK-SIGN': signature,
                'X-BTK-APIKEY': self.api_key
            }
            
            if method.upper() == 'GET':
                response = requests.get(url, headers=headers, timeout=10)
            else:
                response = requests.post(url, headers=headers, json=body or {}, timeout=10)
            
            response.raise_for_status()
            return response.json()
            
        except Exception as e:
            self.logger.error(f"Private API Error: {e}")
            return None

class TradingStrategy:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"""
    
    @staticmethod
    def momentum_strategy(prices, current_price, period=10):
        """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Momentum ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        if len(prices) < period:
            return {'action': 'hold', 'confidence': 0, 'reason': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'}
        
        short_ma = np.mean(prices[-5:])
        long_ma = np.mean(prices[-period:])
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        rsi = TradingStrategy.calculate_rsi(prices)
        
        momentum_ratio = (short_ma - long_ma) / long_ma
        
        if momentum_ratio > 0.002 and rsi < 70:  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ overbought
            confidence = min(0.8, abs(momentum_ratio) * 100)
            return {
                'action': 'buy', 
                'confidence': confidence,
                'reason': f'Momentum ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: {momentum_ratio:.4f}, RSI: {rsi:.1f}'
            }
        elif momentum_ratio < -0.002 and rsi > 30:  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠ oversold
            confidence = min(0.8, abs(momentum_ratio) * 100)
            return {
                'action': 'sell', 
                'confidence': confidence,
                'reason': f'Momentum ‡∏•‡∏î‡∏•‡∏á: {momentum_ratio:.4f}, RSI: {rsi:.1f}'
            }
        
        return {
            'action': 'hold', 
            'confidence': 0.3,
            'reason': f'Momentum ‡∏Å‡∏•‡∏≤‡∏á ‡πÜ: {momentum_ratio:.4f}, RSI: {rsi:.1f}'
        }
    
    @staticmethod
    def calculate_rsi(prices, period=14):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RSI"""
        if len(prices) < period + 1:
            return 50  # ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠
        
        prices_array = np.array(prices)
        deltas = np.diff(prices_array)
        
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[-period:])
        avg_loss = np.mean(losses[-period:])
        
        if avg_loss == 0:
            return 100
        
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        
        return rsi
    
    @staticmethod
    def bollinger_bands_strategy(prices, current_price, period=20, std_mult=2):
        """‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Bollinger Bands"""
        if len(prices) < period:
            return {'action': 'hold', 'confidence': 0, 'reason': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'}
        
        prices_array = np.array(prices[-period:])
        middle = np.mean(prices_array)
        std = np.std(prices_array)
        
        upper_band = middle + (std_mult * std)
        lower_band = middle - (std_mult * std)
        
        if current_price <= lower_band:
            return {
                'action': 'buy',
                'confidence': 0.8,
                'reason': f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ Lower Band: {current_price:.2f} <= {lower_band:.2f}'
            }
        elif current_price >= upper_band:
            return {
                'action': 'sell',
                'confidence': 0.8,
                'reason': f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ Upper Band: {current_price:.2f} >= {upper_band:.2f}'
            }
        
        return {
            'action': 'hold',
            'confidence': 0.2,
            'reason': f'‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö: {lower_band:.2f} < {current_price:.2f} < {upper_band:.2f}'
        }

class BitkubTradingBot:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ Bitkub AI Trading Bot - Professional Edition")
        self.root.geometry("1400x900")
        self.root.configure(bg='#1a1a1a')
        
        # Setup logging
        self.setup_logging()
        
        # API Client
        self.api_client = None
        
        # Trading state
        self.ai_enabled = False
        self.price_history = deque(maxlen=200)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î buffer
        self.stop_trading = False
        self.total_trades = 0
        self.successful_trades = 0
        self.failed_trades = 0
        self.total_profit_loss = 0.0
        
        # Chart variables
        self.fig = None
        self.ax = None
        self.canvas = None
        self.animation = None
        
        # Configuration
        self.config = configparser.ConfigParser()
        self.config_file = 'bot_config.ini'
        self.load_configuration()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Style ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.setup_styles()
        self.create_widgets()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
        self.start_price_monitoring()
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        self.load_saved_settings()
        
    def setup_logging(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå logs ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        if not os.path.exists('logs'):
            os.makedirs('logs')
            
        log_filename = f"logs/trading_bot_{datetime.now().strftime('%Y%m%d')}.log"
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_filename, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('BitkubBot')
    
    def load_configuration(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        if os.path.exists(self.config_file):
            self.config.read(self.config_file, encoding='utf-8')
    
    def save_configuration(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        with open(self.config_file, 'w', encoding='utf-8') as f:
            self.config.write(f)
    
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Style ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        bg_dark = '#1a1a1a'
        bg_medium = '#2d2d2d'
        bg_light = '#404040'
        fg_color = '#ffffff'
        accent_color = '#00d4aa'
        error_color = '#ff6b6b'
        success_color = '#51cf66'
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î style ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        style.configure('Dark.TFrame', background=bg_dark)
        style.configure('Dark.TLabel', background=bg_dark, foreground=fg_color)
        style.configure('Dark.TLabelFrame', background=bg_dark, foreground=fg_color)
        style.configure('Dark.TButton', background=bg_light, foreground=fg_color)
        style.configure('Dark.TEntry', fieldbackground=bg_light, foreground=fg_color)
        style.configure('Dark.TCombobox', fieldbackground=bg_light, foreground=fg_color)
        
        # Style ‡∏û‡∏¥‡πÄ‡∏®‡∏©
        style.configure('Title.TLabel', background=bg_dark, foreground=accent_color, 
                       font=('Segoe UI', 16, 'bold'))
        style.configure('Header.TLabel', background=bg_dark, foreground=fg_color, 
                       font=('Segoe UI', 12, 'bold'))
        style.configure('Success.TLabel', background=bg_dark, foreground=success_color, 
                       font=('Segoe UI', 11, 'bold'))
        style.configure('Error.TLabel', background=bg_dark, foreground=error_color, 
                       font=('Segoe UI', 11, 'bold'))
        
    def create_widgets(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        
        # Main container
        main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        main_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Header ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        self.create_enhanced_header(main_frame)
        
        # Notebook
        notebook = ttk.Notebook(main_frame)
        notebook.pack(fill='both', expand=True, pady=(10, 0))
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        self.create_dashboard_tab(notebook)
        self.create_api_config_tab(notebook)
        self.create_ai_trading_tab(notebook)
        self.create_manual_trading_tab(notebook)
        self.create_portfolio_tab(notebook)
        self.create_market_data_tab(notebook)
        self.create_settings_tab(notebook)
        
        # Status bar ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        self.create_enhanced_status_bar(main_frame)
        
    def create_enhanced_header(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        header_frame = ttk.Frame(parent, style='Dark.TFrame')
        header_frame.pack(fill='x', pady=(0, 10))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - Logo ‡πÅ‡∏•‡∏∞ Title
        left_frame = ttk.Frame(header_frame, style='Dark.TFrame')
        left_frame.pack(side='left')
        
        ttk.Label(left_frame, text="üöÄ Bitkub AI Trading Bot", 
                 style='Title.TLabel').pack(side='left')
        
        version_label = ttk.Label(left_frame, text="v2.0 Pro", 
                                 style='Dark.TLabel', font=('Segoe UI', 8))
        version_label.pack(side='left', padx=(10, 0))
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏î‡πà‡∏ß‡∏ô
        center_frame = ttk.Frame(header_frame, style='Dark.TFrame')
        center_frame.pack(side='left', expand=True, padx=50)
        
        stats_container = ttk.Frame(center_frame, style='Dark.TFrame')
        stats_container.pack()
        
        self.header_stats = {}
        quick_stats = [
            ("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", "üî¥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"),
            ("AI Trading", "üî¥ ‡∏õ‡∏¥‡∏î"),
            ("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î", "0"),
            ("‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô", "0.00%")
        ]
        
        for i, (label, value) in enumerate(quick_stats):
            stat_frame = ttk.Frame(stats_container, style='Dark.TFrame')
            stat_frame.grid(row=0, column=i, padx=10)
            
            ttk.Label(stat_frame, text=label, style='Dark.TLabel', 
                     font=('Segoe UI', 9)).pack()
            self.header_stats[label] = ttk.Label(stat_frame, text=value, 
                                               style='Header.TLabel', font=('Segoe UI', 10, 'bold'))
            self.header_stats[label].pack()
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πà‡∏ß‡∏ô
        right_frame = ttk.Frame(header_frame, style='Dark.TFrame')
        right_frame.pack(side='right')
        
        self.quick_start_btn = ttk.Button(right_frame, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI",
                                         command=self.quick_start_ai, style='Dark.TButton')
        self.quick_start_btn.pack(side='right', padx=5)
        
        ttk.Button(right_frame, text="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô",
                  command=self.quick_settings, style='Dark.TButton').pack(side='right', padx=5)
        
    def create_dashboard_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö Dashboard ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="üìä Dashboard")
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        stats_frame = ttk.LabelFrame(frame, text="üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", style='Dark.LabelFrame')
        stats_frame.pack(fill='x', padx=10, pady=10)
        
        stats_container = ttk.Frame(stats_frame, style='Dark.TFrame')
        stats_container.pack(fill='x', padx=10, pady=10)
        
        self.stats_cards = {}
        detailed_stats = [
            ("üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô (THB)", "0.00", "Success.TLabel"),
            ("üìà ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô", "0.00%", "Dark.TLabel"),
            ("üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "0%", "Dark.TLabel"),
            ("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "0", "Success.TLabel"),
            ("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "0", "Error.TLabel"),
            ("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ", "Dark.TLabel")
        ]
        
        for i, (label, value, style) in enumerate(detailed_stats):
            row, col = i // 3, i % 3
            card_frame = ttk.Frame(stats_container, style='Dark.TFrame')
            card_frame.grid(row=row, column=col, padx=10, pady=5, sticky='ew')
            
            ttk.Label(card_frame, text=label, style='Header.TLabel').pack()
            self.stats_cards[label] = ttk.Label(card_frame, text=value, style=style)
            self.stats_cards[label].pack()
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ columns ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤ ‡πÜ ‡∏Å‡∏±‡∏ô
        for i in range(3):
            stats_container.grid_columnconfigure(i, weight=1)
        
        # ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ matplotlib)
        if MATPLOTLIB_AVAILABLE:
            self.create_price_chart(frame)
        
        # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏î‡πà‡∏ß‡∏ô
        self.create_quick_actions(frame)
        
    def create_price_chart(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤"""
        chart_frame = ttk.LabelFrame(parent, text="üìà ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤", style='Dark.LabelFrame')
        chart_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á matplotlib figure
        self.fig, self.ax = plt.subplots(figsize=(12, 4), facecolor='#1a1a1a')
        self.ax.set_facecolor('#1a1a1a')
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏Å‡∏ô
        self.ax.tick_params(colors='white')
        self.ax.spines['bottom'].set_color('white')
        self.ax.spines['top'].set_color('white')
        self.ax.spines['right'].set_color('white')
        self.ax.spines['left'].set_color('white')
        self.ax.set_title('BTC/THB Price Movement', color='white', fontsize=14)
        self.ax.set_ylabel('Price (THB)', color='white')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á canvas
        self.canvas = FigureCanvasTkAgg(self.fig, chart_frame)
        self.canvas.get_tk_widget().pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° animation
        self.start_chart_animation()
    
    def start_chart_animation(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° animation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü"""
        def update_chart(frame):
            if len(self.price_history) > 1:
                self.ax.clear()
                
                # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÅ‡∏•‡∏∞ style ‡πÉ‡∏´‡∏°‡πà
                self.ax.set_facecolor('#1a1a1a')
                self.ax.tick_params(colors='white')
                for spine in self.ax.spines.values():
                    spine.set_color('white')
                
                # ‡∏û‡∏•‡πá‡∏≠‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                prices = list(self.price_history)
                times = range(len(prices))
                
                self.ax.plot(times, prices, color='#00d4aa', linewidth=2, alpha=0.8)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° moving average
                if len(prices) >= 20:
                    ma20 = [np.mean(prices[max(0, i-19):i+1]) for i in range(len(prices))]
                    self.ax.plot(times, ma20, color='#ff6b6b', linewidth=1, alpha=0.7, label='MA20')
                
                self.ax.set_title('BTC/THB Price Movement', color='white')
                self.ax.set_ylabel('Price (THB)', color='white')
                
                if len(prices) >= 2:
                    self.ax.legend(facecolor='#2d2d2d', edgecolor='white', labelcolor='white')
                
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
                if len(times) > 100:
                    self.ax.set_xlim(len(times) - 100, len(times))
            
            return []
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° animation (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        self.animation = FuncAnimation(self.fig, update_chart, interval=5000, blit=False)
    
    def create_quick_actions(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏î‡πà‡∏ß‡∏ô"""
        actions_frame = ttk.LabelFrame(parent, text="‚ö° ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏î‡πà‡∏ß‡∏ô", style='Dark.LabelFrame')
        actions_frame.pack(fill='x', padx=10, pady=10)
        
        button_container = ttk.Frame(actions_frame, style='Dark.TFrame')
        button_container.pack(padx=10, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        buttons = [
            ("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", self.refresh_dashboard, "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
            ("üí∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô", self.quick_balance_check, "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"),
            ("üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥", self.show_detailed_stats, "‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"),
            ("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", self.save_all_settings, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
            ("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", self.export_data, "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î"),
        ]
        
        for i, (text, command, tooltip) in enumerate(buttons):
            btn = ttk.Button(button_container, text=text, command=command, style='Dark.TButton')
            btn.pack(side='left', padx=5)
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° tooltip (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á library ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
            self.create_tooltip(btn, tooltip)
    
    def create_tooltip(self, widget, text):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á tooltip ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ"""
        def on_enter(event):
            widget.configure(text=f"{widget['text']} - {text}")
        
        def on_leave(event):
            original_text = widget['text'].split(' - ')[0]
            widget.configure(text=original_text)
        
        # ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏™‡∏î‡∏á tooltip ‡πÉ‡∏ô status bar ‡πÅ‡∏ó‡∏ô
        def show_tooltip(event):
            if hasattr(self, 'status_var'):
                self.status_var.set(f"üí° {text}")
        
        def hide_tooltip(event):
            if hasattr(self, 'status_var'):
                self.status_var.set("üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        widget.bind("<Enter>", show_tooltip)
        widget.bind("<Leave>", hide_tooltip)
    
    def create_api_config_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö API Configuration ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API")
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API
        config_frame = ttk.LabelFrame(frame, text="üîê ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API", style='Dark.LabelFrame')
        config_frame.pack(fill='x', padx=20, pady=20)
        
        config_container = ttk.Frame(config_frame, style='Dark.TFrame')
        config_container.pack(fill='x', padx=10, pady=10)
        
        # API Key
        ttk.Label(config_container, text="API Key:", style='Header.TLabel').grid(row=0, column=0, 
                                                                               sticky='w', padx=10, pady=10)
        self.api_key_entry = ttk.Entry(config_container, width=60, show="*", style='Dark.TEntry')
        self.api_key_entry.grid(row=0, column=1, padx=10, pady=10, sticky='ew')
        
        # API Secret
        ttk.Label(config_container, text="API Secret:", style='Header.TLabel').grid(row=1, column=0, 
                                                                                  sticky='w', padx=10, pady=10)
        self.api_secret_entry = ttk.Entry(config_container, width=60, show="*", style='Dark.TEntry')
        self.api_secret_entry.grid(row=1, column=1, padx=10, pady=10, sticky='ew')
        
        config_container.grid_columnconfigure(1, weight=1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        button_frame = ttk.Frame(config_frame, style='Dark.TFrame')
        button_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", 
                  command=self.save_api_config, style='Dark.TButton').pack(side='left', padx=5)
        ttk.Button(button_frame, text="üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", 
                  command=self.test_api_connection, style='Dark.TButton').pack(side='left', padx=5)
        ttk.Button(button_frame, text="üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå", 
                  command=self.load_api_from_file, style='Dark.TButton').pack(side='left', padx=5)
        ttk.Button(button_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå", 
                  command=self.save_api_to_file, style='Dark.TButton').pack(side='left', padx=5)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        status_frame = ttk.LabelFrame(frame, text="üåê ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", style='Dark.LabelFrame')
        status_frame.pack(fill='x', padx=20, pady=20)
        
        self.connection_status = ttk.Label(status_frame, text="‚ö´ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠", 
                                         style='Error.TLabel', font=('Segoe UI', 12, 'bold'))
        self.connection_status.pack(pady=10)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        self.connection_info = ttk.Label(status_frame, text="", style='Dark.TLabel')
        self.connection_info.pack(pady=5)
        
        # Log
        log_frame = ttk.LabelFrame(frame, text="üìù Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", style='Dark.LabelFrame')
        log_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡πÅ‡∏•‡∏∞ scrollbar
        log_container = ttk.Frame(log_frame, style='Dark.TFrame')
        log_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.log_text = scrolledtext.ScrolledText(log_container, height=15, 
                                                bg='#1e1e1e', fg='#00d4aa', 
                                                font=('Consolas', 10),
                                                insertbackground='white')
        self.log_text.pack(fill='both', expand=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ log
        log_buttons = ttk.Frame(log_frame, style='Dark.TFrame')
        log_buttons.pack(fill='x', padx=10, pady=5)
        
        ttk.Button(log_buttons, text="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á Log", 
                  command=self.clear_logs, style='Dark.TButton').pack(side='left', padx=5)
        ttk.Button(log_buttons, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log", 
                  command=self.save_logs, style='Dark.TButton').pack(side='left', padx=5)
        ttk.Button(log_buttons, text="üìÇ ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Log", 
                  command=self.open_log_folder, style='Dark.TButton').pack(side='left', padx=5)
    
    def create_ai_trading_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö AI Trading ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="ü§ñ AI Trading")
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI
        ai_config_frame = ttk.LabelFrame(frame, text="üß† ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ AI Trading", style='Dark.LabelFrame')
        ai_config_frame.pack(fill='x', padx=20, pady=20)
        
        config_grid = ttk.Frame(ai_config_frame, style='Dark.TFrame')
        config_grid.pack(fill='x', padx=10, pady=10)
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        basic_settings = [
            ("Symbol:", "ai_symbol_var", ["btc_thb", "eth_thb", "ada_thb", "dot_thb", "xrp_thb"]),
            ("‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå:", "ai_strategy_var", ["momentum", "bollinger_bands", "hybrid"]),
            ("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á:", "ai_risk_var", ["low", "medium", "high", "aggressive"])
        ]
        
        self.ai_vars = {}
        for i, (label, var_name, values) in enumerate(basic_settings):
            ttk.Label(config_grid, text=label, style='Header.TLabel').grid(row=i, column=0, 
                                                                         sticky='w', padx=5, pady=5)
            var = tk.StringVar(value=values[0])
            self.ai_vars[var_name] = var
            combo = ttk.Combobox(config_grid, textvariable=var, values=values, 
                               state='readonly', style='Dark.TCombobox')
            combo.grid(row=i, column=1, padx=5, pady=5, sticky='ew')
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
        advanced_settings = [
            ("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î (THB):", "ai_amount_var", "1000"),
            ("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á:", "ai_max_trades_var", "5"),
            ("Stop Loss (%):", "ai_stop_loss_var", "2.0"),
            ("Take Profit (%):", "ai_take_profit_var", "4.0")
        ]
        
        for i, (label, var_name, default) in enumerate(advanced_settings, len(basic_settings)):
            ttk.Label(config_grid, text=label, style='Header.TLabel').grid(row=i, column=0, 
                                                                         sticky='w', padx=5, pady=5)
            var = tk.StringVar(value=default)
            self.ai_vars[var_name] = var
            entry = ttk.Entry(config_grid, textvariable=var, style='Dark.TEntry')
            entry.grid(row=i, column=1, padx=5, pady=5, sticky='ew')
        
        config_grid.grid_columnconfigure(1, weight=1)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° AI
        ai_control_frame = ttk.Frame(ai_config_frame, style='Dark.TFrame')
        ai_control_frame.pack(fill='x', padx=10, pady=10)
        
        self.ai_start_button = ttk.Button(ai_control_frame, text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading", 
                                        command=self.toggle_ai_trading, style='Dark.TButton')
        self.ai_start_button.pack(side='left', padx=5)
        
        ttk.Button(ai_control_frame, text="‚öôÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå", 
                  command=self.customize_strategy, style='Dark.TButton').pack(side='left', padx=5)
        
        ttk.Button(ai_control_frame, text="üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå", 
                  command=self.backtest_strategy, style='Dark.TButton').pack(side='left', padx=5)
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI
        ai_stats_frame = ttk.LabelFrame(frame, text="üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI Trading", style='Dark.LabelFrame')
        ai_stats_frame.pack(fill='x', padx=20, pady=20)
        
        self.ai_stats_container = ttk.Frame(ai_stats_frame, style='Dark.TFrame')
        self.ai_stats_container.pack(fill='x', padx=10, pady=10)
        
        self.ai_stats = {}
        ai_stat_items = [
            ("üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥", "0%"),
            ("üí∞ ‡∏Å‡∏≥‡πÑ‡∏£‡∏£‡∏ß‡∏°", "0 THB"),
            ("üìà ‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "0"),
            ("üìâ ‡πÄ‡∏ó‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "0"),
            ("‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", "0 ‡∏ô‡∏≤‡∏ó‡∏µ"),
            ("üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "‡∏õ‡∏¥‡∏î")
        ]
        
        for i, (label, value) in enumerate(ai_stat_items):
            row, col = i // 3, i % 3
            stat_frame = ttk.Frame(self.ai_stats_container, style='Dark.TFrame')
            stat_frame.grid(row=row, column=col, padx=10, pady=5, sticky='ew')
            
            ttk.Label(stat_frame, text=label, style='Dark.TLabel').pack()
            self.ai_stats[label] = ttk.Label(stat_frame, text=value, style='Header.TLabel')
            self.ai_stats[label].pack()
        
        for i in range(3):
            self.ai_stats_container.grid_columnconfigure(i, weight=1)
        
        # AI Log
        ai_log_frame = ttk.LabelFrame(frame, text="ü§ñ AI Trading Log", style='Dark.LabelFrame')
        ai_log_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        self.ai_log = scrolledtext.ScrolledText(ai_log_frame, height=12, 
                                              bg='#1e1e1e', fg='#00d4aa', 
                                              font=('Consolas', 10),
                                              insertbackground='white')
        self.ai_log.pack(fill='both', expand=True, padx=10, pady=10)
        
    def create_manual_trading_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö Manual Trading ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="üí∞ Manual Trading")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏î
        market_info_frame = ttk.LabelFrame(frame, text="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏î", style='Dark.LabelFrame')
        market_info_frame.pack(fill='x', padx=10, pady=10)
        
        self.create_live_market_info(market_info_frame)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
        trading_container = ttk.Frame(frame, style='Dark.TFrame')
        trading_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ã‡∏∑‡πâ‡∏≠
        buy_frame = ttk.LabelFrame(trading_container, text="üü¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", style='Dark.LabelFrame')
        buy_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        self.create_enhanced_trading_form(buy_frame, "buy")
        
        # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≤‡∏¢
        sell_frame = ttk.LabelFrame(trading_container, text="üî¥ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢", style='Dark.LabelFrame')
        sell_frame.pack(side='right', fill='both', expand=True, padx=(10, 0))
        
        self.create_enhanced_trading_form(sell_frame, "sell")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏•‡πà‡∏≤‡∏á - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞ Order Book
        bottom_container = ttk.Frame(frame, style='Dark.TFrame')
        bottom_container.pack(fill='both', expand=True, padx=20, pady=20)
        
        # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
        result_frame = ttk.LabelFrame(bottom_container, text="üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", style='Dark.LabelFrame')
        result_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        self.trading_result = scrolledtext.ScrolledText(result_frame, height=10, 
                                                      bg='#1e1e1e', fg='#ffffff', 
                                                      font=('Consolas', 10),
                                                      insertbackground='white')
        self.trading_result.pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
        orders_frame = ttk.LabelFrame(bottom_container, text="üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î", style='Dark.LabelFrame')
        orders_frame.pack(side='right', fill='both', expand=True, padx=(10, 0))
        
        self.open_orders_text = scrolledtext.ScrolledText(orders_frame, height=10, 
                                                        bg='#1e1e1e', fg='#ffffff', 
                                                        font=('Consolas', 9),
                                                        insertbackground='white')
        self.open_orders_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
        ttk.Button(orders_frame, text="üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", 
                  command=self.refresh_open_orders, style='Dark.TButton').pack(pady=5)
    
    def create_live_market_info(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏î"""
        info_container = ttk.Frame(parent, style='Dark.TFrame')
        info_container.pack(fill='x', padx=10, pady=10)
        
        # Symbol selector
        symbol_frame = ttk.Frame(info_container, style='Dark.TFrame')
        symbol_frame.pack(side='left')
        
        ttk.Label(symbol_frame, text="Symbol:", style='Header.TLabel').pack(side='left')
        self.market_symbol_var = tk.StringVar(value="btc_thb")
        symbol_combo = ttk.Combobox(symbol_frame, textvariable=self.market_symbol_var, 
                                   values=["btc_thb", "eth_thb", "ada_thb", "dot_thb"], 
                                   state='readonly', style='Dark.TCombobox', width=15)
        symbol_combo.pack(side='left', padx=10)
        symbol_combo.bind('<<ComboboxSelected>>', self.on_symbol_change)
        
        # Market data display
        self.market_info_labels = {}
        market_data = [
            ("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", "0.00 THB"),
            ("üìà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á 24h", "0.00%"),
            ("üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì 24h", "0.00"),
            ("üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡πÑ‡∏°‡πà‡∏°‡∏µ")
        ]
        
        info_grid = ttk.Frame(info_container, style='Dark.TFrame')
        info_grid.pack(side='right', expand=True, fill='x', padx=20)
        
        for i, (label, value) in enumerate(market_data):
            info_frame = ttk.Frame(info_grid, style='Dark.TFrame')
            info_frame.grid(row=0, column=i, padx=10, sticky='ew')
            info_grid.grid_columnconfigure(i, weight=1)
            
            ttk.Label(info_frame, text=label, style='Dark.TLabel', font=('Segoe UI', 9)).pack()
            self.market_info_labels[label] = ttk.Label(info_frame, text=value, 
                                                     style='Header.TLabel', font=('Segoe UI', 10, 'bold'))
            self.market_info_labels[label].pack()
    
    def create_enhanced_trading_form(self, parent, side):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        form_frame = ttk.Frame(parent, style='Dark.TFrame')
        form_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
        fields = [
            ("Symbol:", f"{side}_symbol_var", "btc_thb", "combo"),
            ("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:", f"{side}_amount_var", "", "entry"),
            ("‡∏£‡∏≤‡∏Ñ‡∏≤:", f"{side}_rate_var", "", "entry"),
            ("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:", f"{side}_type_var", "limit", "combo")
        ]
        
        vars_dict = {}
        for i, (label, var_name, default, widget_type) in enumerate(fields):
            ttk.Label(form_frame, text=label, style='Header.TLabel').grid(row=i, column=0, 
                                                                        sticky='w', pady=5)
            
            var = tk.StringVar(value=default)
            vars_dict[var_name] = var
            
            if widget_type == "combo":
                if "symbol" in var_name:
                    values = ["btc_thb", "eth_thb", "ada_thb", "dot_thb"]
                else:  # type
                    values = ["limit", "market"]
                widget = ttk.Combobox(form_frame, textvariable=var, values=values, 
                                    state='readonly', style='Dark.TCombobox')
            else:  # entry
                widget = ttk.Entry(form_frame, textvariable=var, style='Dark.TEntry')
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° validation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö number fields
                if "amount" in var_name or "rate" in var_name:
                    widget.bind('<KeyRelease>', lambda e, v=var: self.validate_number(v))
            
            widget.grid(row=i, column=1, padx=10, pady=5, sticky='ew')
        
        form_frame.grid_columnconfigure(1, weight=1)
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ
        setattr(self, f'{side}_vars', vars_dict)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        help_frame = ttk.Frame(form_frame, style='Dark.TFrame')
        help_frame.grid(row=len(fields), column=0, columnspan=2, pady=10, sticky='ew')
        
        if side == 'buy':
            ttk.Button(help_frame, text="üí∞ ‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                      command=lambda: self.use_max_balance(side), style='Dark.TButton').pack(side='left', padx=2)
            ttk.Button(help_frame, text="üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î", 
                      command=lambda: self.use_market_price(side), style='Dark.TButton').pack(side='left', padx=2)
        else:
            ttk.Button(help_frame, text="ü™ô ‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 
                      command=lambda: self.use_max_crypto(side), style='Dark.TButton').pack(side='left', padx=2)
            ttk.Button(help_frame, text="üìä ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î", 
                      command=lambda: self.use_market_price(side), style='Dark.TButton').pack(side='left', padx=2)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        btn_text = "üü¢ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" if side == 'buy' else "üî¥ ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢"
        command = lambda: self.place_order(side)
        
        submit_btn = ttk.Button(form_frame, text=btn_text, command=command, style='Dark.TButton')
        submit_btn.grid(row=len(fields)+1, column=0, columnspan=2, pady=20, sticky='ew')
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        calc_frame = ttk.Frame(form_frame, style='Dark.TFrame')
        calc_frame.grid(row=len(fields)+2, column=0, columnspan=2, sticky='ew')
        
        setattr(self, f'{side}_calc_label', ttk.Label(calc_frame, text="", style='Dark.TLabel'))
        getattr(self, f'{side}_calc_label').pack()
        
        # Bind ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö real-time
        for var_name, var in vars_dict.items():
            if "amount" in var_name or "rate" in var_name:
                var.trace('w', lambda *args, s=side: self.update_calculation(s))
    
    def create_portfolio_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö Portfolio ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="üíº Portfolio")
        
        # ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° Portfolio
        overview_frame = ttk.LabelFrame(frame, text="üí∞ ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° Portfolio", style='Dark.LabelFrame')
        overview_frame.pack(fill='x', padx=20, pady=20)
        
        # Summary stats
        summary_container = ttk.Frame(overview_frame, style='Dark.TFrame')
        summary_container.pack(fill='x', padx=10, pady=10)
        
        self.portfolio_summary = {}
        summary_items = [
            ("üíµ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° (THB)", "0.00"),
            ("üìà ‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", "0.00%"),
            ("üéØ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô", "0"),
            ("‚è±Ô∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", "‡πÑ‡∏°‡πà‡∏°‡∏µ")
        ]
        
        for i, (label, value) in enumerate(summary_items):
            summary_frame = ttk.Frame(summary_container, style='Dark.TFrame')
            summary_frame.grid(row=0, column=i, padx=10, pady=5, sticky='ew')
            summary_container.grid_columnconfigure(i, weight=1)
            
            ttk.Label(summary_frame, text=label, style='Header.TLabel').pack()
            self.portfolio_summary[label] = ttk.Label(summary_frame, text=value, style='Header.TLabel')
            self.portfolio_summary[label].pack()
        
        # Balance cards
        balance_frame = ttk.LabelFrame(overview_frame, text="üí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", style='Dark.LabelFrame')
        balance_frame.pack(fill='x', padx=10, pady=10)
        
        balance_container = ttk.Frame(balance_frame, style='Dark.TFrame')
        balance_container.pack(fill='x', padx=10, pady=10)
        
        self.balance_cards = {}
        currencies = ["THB", "BTC", "ETH", "ADA", "DOT"]
        
        for i, currency in enumerate(currencies):
            card_frame = ttk.Frame(balance_container, style='Dark.TFrame', relief='solid', borderwidth=1)
            card_frame.grid(row=0, column=i, padx=5, pady=5, sticky='ew')
            balance_container.grid_columnconfigure(i, weight=1)
            
            # Currency icon/name
            ttk.Label(card_frame, text=f"üí∞ {currency}", style='Header.TLabel', 
                     font=('Segoe UI', 11, 'bold')).pack(pady=2)
            
            # Available balance
            self.balance_cards[f"{currency}_available"] = ttk.Label(card_frame, text="0.00000000", 
                                                                   style='Success.TLabel')
            self.balance_cards[f"{currency}_available"].pack()
            
            # Reserved balance (if any)
            self.balance_cards[f"{currency}_reserved"] = ttk.Label(card_frame, text="(‡∏à‡∏≠‡∏á: 0.00)", 
                                                                  style='Dark.TLabel', font=('Segoe UI', 8))
            self.balance_cards[f"{currency}_reserved"].pack()
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Portfolio
        control_frame = ttk.Frame(overview_frame, style='Dark.TFrame')
        control_frame.pack(fill='x', padx=10, pady=10)
        
        portfolio_buttons = [
            ("üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Portfolio", self.refresh_portfolio),
            ("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", self.get_full_balances),
            ("üìà ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î", self.show_trade_history),
            ("üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", self.export_portfolio_data)
        ]
        
        for text, command in portfolio_buttons:
            ttk.Button(control_frame, text=text, command=command, style='Dark.TButton').pack(side='left', padx=5)
        
        # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Portfolio
        detail_frame = ttk.LabelFrame(frame, text="üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Portfolio", style='Dark.LabelFrame')
        detail_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.create_portfolio_treeview(detail_frame)
    
    def create_portfolio_treeview(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Portfolio"""
        tree_frame = ttk.Frame(parent, style='Dark.TFrame')
        tree_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview
        columns = ('Currency', 'Available', 'Reserved', 'Total', 'THB_Value', 'Percentage')
        self.portfolio_tree = ttk.Treeview(tree_frame, columns=columns, show='headings', height=10)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î headings
        headings = {
            'Currency': '‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô',
            'Available': '‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
            'Reserved': '‡∏à‡∏≠‡∏á',
            'Total': '‡∏£‡∏ß‡∏°',
            'THB_Value': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (THB)',
            'Percentage': '% ‡∏Ç‡∏≠‡∏á Portfolio'
        }
        
        for col, heading in headings.items():
            self.portfolio_tree.heading(col, text=heading)
            self.portfolio_tree.column(col, width=100, anchor='center')
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(tree_frame, orient='vertical', command=self.portfolio_tree.yview)
        self.portfolio_tree.configure(yscrollcommand=scrollbar.set)
        
        # Pack
        self.portfolio_tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')
    
    def create_market_data_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö Market Data ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="üìà Market Data")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_frame = ttk.LabelFrame(frame, text="üéØ ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Market Data", style='Dark.LabelFrame')
        control_frame.pack(fill='x', padx=20, pady=20)
        
        control_container = ttk.Frame(control_frame, style='Dark.TFrame')
        control_container.pack(fill='x', padx=10, pady=10)
        
        # Symbol selection
        ttk.Label(control_container, text="Symbol:", style='Header.TLabel').pack(side='left')
        self.market_data_symbol_var = tk.StringVar(value="btc_thb")
        symbol_combo = ttk.Combobox(control_container, textvariable=self.market_data_symbol_var, 
                                   values=["btc_thb", "eth_thb", "ada_thb", "dot_thb"], 
                                   style='Dark.TCombobox')
        symbol_combo.pack(side='left', padx=10)
        
        # Data type buttons
        data_buttons = [
            ("üìä Ticker", self.get_ticker_data),
            ("üìã Order Book", self.get_orderbook_data),
            ("üíπ Recent Trades", self.get_trades_data),
            ("üìà 24h Stats", self.get_24h_stats)
        ]
        
        for text, command in data_buttons:
            ttk.Button(control_container, text=text, command=command, style='Dark.TButton').pack(side='left', padx=5)
        
        # Auto refresh
        auto_frame = ttk.Frame(control_container, style='Dark.TFrame')
        auto_frame.pack(side='right')
        
        self.auto_refresh_var = tk.BooleanVar()
        ttk.Checkbutton(auto_frame, text="Auto Refresh (30s)", variable=self.auto_refresh_var,
                       command=self.toggle_auto_refresh).pack(side='right')
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market
        data_frame = ttk.LabelFrame(frame, text="üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market", style='Dark.LabelFrame')
        data_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notebook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data_notebook = ttk.Notebook(data_frame)
        data_notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Tabs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.market_data_tabs = {}
        tab_names = ["Ticker", "Order Book", "Trades", "Statistics"]
        
        for tab_name in tab_names:
            tab_frame = ttk.Frame(data_notebook, style='Dark.TFrame')
            data_notebook.add(tab_frame, text=tab_name)
            
            text_widget = scrolledtext.ScrolledText(tab_frame, bg='#1e1e1e', fg='#00d4aa', 
                                                  font=('Consolas', 10), insertbackground='white')
            text_widget.pack(fill='both', expand=True, padx=10, pady=10)
            self.market_data_tabs[tab_name] = text_widget
    
    def create_settings_tab(self, notebook):
        """‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        frame = ttk.Frame(notebook, style='Dark.TFrame')
        notebook.add(frame, text="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        general_frame = ttk.LabelFrame(frame, text="üîß ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", style='Dark.LabelFrame')
        general_frame.pack(fill='x', padx=20, pady=20)
        
        general_container = ttk.Frame(general_frame, style='Dark.TFrame')
        general_container.pack(fill='x', padx=10, pady=10)
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.setting_vars = {}
        settings = [
            ("üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á", "sound_notifications", True, "checkbox"),
            ("üìß ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Email", "email_notifications", False, "checkbox"),
            ("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥", "auto_save", True, "checkbox"),
            ("üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏Å (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)", "price_update_interval", "30", "entry"),
            ("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö", "price_history_size", "200", "entry"),
            ("‚ö†Ô∏è ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô", "alert_percentage", "5.0", "entry")
        ]
        
        for i, (label, var_name, default, widget_type) in enumerate(settings):
            ttk.Label(general_container, text=label, style='Header.TLabel').grid(row=i, column=0, 
                                                                               sticky='w', padx=10, pady=5)
            
            if widget_type == "checkbox":
                var = tk.BooleanVar(value=default)
                widget = ttk.Checkbutton(general_container, variable=var)
            else:  # entry
                var = tk.StringVar(value=str(default))
                widget = ttk.Entry(general_container, textvariable=var, style='Dark.TEntry', width=20)
            
            self.setting_vars[var_name] = var
            widget.grid(row=i, column=1, padx=10, pady=5, sticky='w')
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        security_frame = ttk.LabelFrame(frame, text="üîê ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", style='Dark.LabelFrame')
        security_frame.pack(fill='x', padx=20, pady=20)
        
        security_container = ttk.Frame(security_frame, style='Dark.TFrame')
        security_container.pack(fill='x', padx=10, pady=10)
        
        security_settings = [
            ("üîí ‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ô‡∏≤‡∏ó‡∏µ)", "auto_lock_minutes", "30"),
            ("üí∞ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î (THB)", "max_trade_amount", "10000"),
            ("üìä ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô", "max_trades_per_day", "50"),
            ("‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ (THB)", "confirm_threshold", "5000")
        ]
        
        for i, (label, var_name, default) in enumerate(security_settings):
            ttk.Label(security_container, text=label, style='Header.TLabel').grid(row=i, column=0, 
                                                                                sticky='w', padx=10, pady=5)
            var = tk.StringVar(value=default)
            self.setting_vars[var_name] = var
            entry = ttk.Entry(security_container, textvariable=var, style='Dark.TEntry', width=20)
            entry.grid(row=i, column=1, padx=10, pady=5, sticky='w')
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        settings_buttons_frame = ttk.Frame(frame, style='Dark.TFrame')
        settings_buttons_frame.pack(fill='x', padx=20, pady=20)
        
        settings_buttons = [
            ("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", self.save_all_settings),
            ("üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô", self.load_default_settings),
            ("üìÅ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", self.import_settings),
            ("üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", self.export_settings),
            ("üóëÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", self.reset_all_settings)
        ]
        
        for text, command in settings_buttons:
            ttk.Button(settings_buttons_frame, text=text, command=command, 
                      style='Dark.TButton').pack(side='left', padx=5)
    
    def create_enhanced_status_bar(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Status Bar ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        status_frame = ttk.Frame(parent, style='Dark.TFrame')
        status_frame.pack(side='bottom', fill='x', pady=(10, 0))
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏Å
        self.status_var = tk.StringVar()
        self.status_var.set("üü¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        status_label = ttk.Label(status_frame, textvariable=self.status_var, 
                               relief='sunken', style='Dark.TLabel')
        status_label.pack(side='left', fill='x', expand=True)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        self.time_var = tk.StringVar()
        time_label = ttk.Label(status_frame, textvariable=self.time_var, 
                             relief='sunken', style='Dark.TLabel')
        time_label.pack(side='right', padx=5)
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤
        self.update_time()
        
        # Progress bar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loading
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(status_frame, variable=self.progress_var, 
                                          maximum=100, length=200)
        # ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        
    def update_time(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô Status Bar"""
        current_time = datetime.now().strftime("%H:%M:%S")
        self.time_var.set(f"üïê {current_time}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.root.after(1000, self.update_time)
    
    # === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å ===
    
    def log_message(self, message, log_type="INFO"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        icons = {
            "INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "WARNING": "‚ö†Ô∏è", 
            "ERROR": "‚ùå", "TRADE": "üìà", "API": "üîó"
        }
        icon = icons.get(log_type, "‚ÑπÔ∏è")
        
        log_entry = f"[{timestamp}] {icon} {message}\n"
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô GUI
        if hasattr(self, 'log_text'):
            self.log_text.insert(tk.END, log_entry)
            self.log_text.see(tk.END)
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏ô log
            lines = self.log_text.get('1.0', tk.END).split('\n')
            if len(lines) > 1000:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 1000 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                self.log_text.delete('1.0', f'{len(lines)-1000}.0')
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô file
        self.logger.info(f"{log_type}: {message}")
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Status
        if hasattr(self, 'status_var'):
            self.status_var.set(f"üü¢ {message[:60]}...")
    
    def log_ai_message(self, message):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AI Log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        if hasattr(self, 'ai_log'):
            self.ai_log.insert(tk.END, log_entry)
            self.ai_log.see(tk.END)
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
            lines = self.ai_log.get('1.0', tk.END).split('\n')
            if len(lines) > 500:
                self.ai_log.delete('1.0', f'{len(lines)-500}.0')
    
    def save_api_config(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        api_key = self.api_key_entry.get().strip()
        api_secret = self.api_secret_entry.get().strip()
        
        if not api_key or not api_secret:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å API Key ‡πÅ‡∏•‡∏∞ Secret")
            return
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö API Key (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô hex ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
        if len(api_key) < 32 or len(api_secret) < 32:
            if not messagebox.askyesno("‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", 
                                     "API Key ‡∏´‡∏£‡∏∑‡∏≠ Secret ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏™‡∏±‡πâ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"):
                return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á API Client
        self.api_client = BitkubAPIClient(api_key, api_secret)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå config (‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™)
        self.config['API'] = {
            'key_hash': hashlib.sha256(api_key.encode()).hexdigest()[:16],  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ hash
            'configured': 'True'
        }
        self.save_configuration()
        
        self.log_message("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
        self.header_stats["‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"].configure(text="üü° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÉ‡∏ô background
        threading.Thread(target=self.test_api_connection, daemon=True).start()
    
    def test_api_connection(self):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        if not self.api_client:
            self.update_connection_status("üî¥ ‡πÑ‡∏°‡πà‡∏°‡∏µ API Config", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API")
            return
        
        try:
            self.log_message("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API...", "API")
            
            # ‡πÅ‡∏™‡∏î‡∏á progress bar
            if hasattr(self, 'progress_bar'):
                self.progress_bar.pack(side='right', padx=5)
                self.progress_var.set(10)
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Public API
            self.log_message("üì° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Public API...", "API")
            public_result = self.api_client.make_public_request('/api/v3/servertime')
            
            if hasattr(self, 'progress_var'):
                self.progress_var.set(50)
            
            if not public_result:
                self.update_connection_status("üî¥ Public API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Public API")
                return
            
            self.log_message("‚úÖ Public API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥", "SUCCESS")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Private API
            self.log_message("üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Private API...", "API")
            private_result = self.api_client.make_private_request('POST', '/api/v3/market/wallet')
            
            if hasattr(self, 'progress_var'):
                self.progress_var.set(90)
            
            if private_result and private_result.get('error') == 0:
                wallet_data = private_result.get('result', {})
                thb_balance = wallet_data.get('THB', 0)
                
                self.update_connection_status("üü¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: {thb_balance:,.2f} THB")
                self.log_message("‚úÖ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "SUCCESS")
                self.log_message(f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô THB: {thb_balance:,.2f}", "SUCCESS")
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô header
                self.stats_cards["üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô (THB)"].configure(text=f"{thb_balance:,.2f}")
                
                messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                
            else:
                error_code = private_result.get('error', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö') if private_result else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'
                self.update_connection_status("üî¥ Authentication ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"Error: {error_code}")
                self.log_message(f"‚ùå API Error Code: {error_code}", "ERROR")
                
                self.show_api_error_help(error_code)
            
            if hasattr(self, 'progress_var'):
                self.progress_var.set(100)
                
        except Exception as e:
            self.update_connection_status("üî¥ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", str(e))
            self.log_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {str(e)}", "ERROR")
        
        finally:
            # ‡∏ã‡πà‡∏≠‡∏ô progress bar
            if hasattr(self, 'progress_bar'):
                self.root.after(2000, lambda: self.progress_bar.pack_forget())
                self.progress_var.set(0)
    
    def update_connection_status(self, status_text, info_text=""):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        if hasattr(self, 'header_stats'):
            self.header_stats["‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"].configure(text=status_text)
        
        if hasattr(self, 'connection_status'):
            self.connection_status.configure(text=status_text)
        
        if hasattr(self, 'connection_info') and info_text:
            self.connection_info.configure(text=info_text)
    
    def show_api_error_help(self, error_code):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API"""
        error_help = {
            3: "API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key",
            5: "IP Address ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° IP ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bitkub",
            6: "Signature ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Secret",
            52: "Permission ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå API"
        }
        
        help_text = error_help.get(error_code, "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏")
        
        messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API", 
                           f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!\n\n"
                           f"Error Code: {error_code}\n"
                           f"‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {help_text}\n\n"
                           f"‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:\n"
                           f"1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÅ‡∏•‡∏∞ Secret\n"
                           f"2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ IP Whitelist\n"
                           f"3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå API\n"
                           f"4. ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà")
    
    def start_price_monitoring(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        def monitor():
            while True:
                try:
                    if not self.api_client:
                        time.sleep(60)
                        continue
                    
                    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏á‡∏¥‡∏ô
                    symbols = ["btc_thb", "eth_thb", "ada_thb"]
                    
                    for symbol in symbols:
                        ticker = self.api_client.make_public_request('/api/v3/market/ticker', {'sym': symbol})
                        if ticker and len(ticker) > 0:
                            price_data = ticker[0]
                            current_price = float(price_data['last'])
                            
                            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
                            if symbol == "btc_thb":  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ BTC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
                                self.price_history.append(current_price)
                            
                            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI
                            self.update_market_display(symbol, price_data)
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                    self.check_price_alerts()
                    
                    # ‡πÉ‡∏ä‡πâ interval ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
                    interval = int(self.setting_vars.get("price_update_interval", tk.StringVar(value="30")).get())
                    time.sleep(interval)
                    
                except Exception as e:
                    self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤: {str(e)}", "ERROR")
                    time.sleep(60)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° thread
        monitoring_thread = threading.Thread(target=monitor, daemon=True)
        monitoring_thread.start()
        self.log_message("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", "SUCCESS")
    
    def update_market_display(self, symbol, price_data):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            current_price = float(price_data['last'])
            change_24h = float(price_data.get('percent_change', 0))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTC)
            if symbol == "btc_thb":
                if hasattr(self, 'market_info_labels'):
                    self.market_info_labels["üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"].configure(text=f"{current_price:,.2f} THB")
                    
                    change_color = "Success.TLabel" if change_24h >= 0 else "Error.TLabel"
                    self.market_info_labels["üìà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á 24h"].configure(text=f"{change_24h:+.2f}%")
                    
                    volume = float(price_data.get('base_volume', 0))
                    self.market_info_labels["üìä ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì 24h"].configure(text=f"{volume:,.2f} BTC")
                    
                    self.market_info_labels["üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"].configure(
                        text=datetime.now().strftime("%H:%M:%S")
                    )
        
        except Exception as e:
            self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•: {str(e)}", "ERROR")
    
    def check_price_alerts(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å
            if len(self.price_history) >= 2:
                current_price = self.price_history[-1]
                previous_price = self.price_history[-2]
                
                change_percent = ((current_price - previous_price) / previous_price) * 100
                alert_threshold = float(self.setting_vars.get("alert_percentage", tk.StringVar(value="5.0")).get())
                
                if abs(change_percent) >= alert_threshold:
                    direction = "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô" if change_percent > 0 else "‡∏•‡∏î‡∏•‡∏á"
                    message = f"üö® ‡∏£‡∏≤‡∏Ñ‡∏≤ BTC {direction} {abs(change_percent):.2f}% !"
                    
                    self.log_message(message, "WARNING")
                    
                    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ß‡πâ)
                    if self.setting_vars.get("sound_notifications", tk.BooleanVar(value=True)).get():
                        self.play_alert_sound()
        
        except Exception as e:
            self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {str(e)}", "ERROR")
    
    def play_alert_sound(self):
        """‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
        try:
            # ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
            import winsound
            winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
        except:
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÑ‡∏î‡πâ
            pass
    
    def toggle_ai_trading(self):
        """‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î AI Trading ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        if not self.ai_enabled:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
            if not self.api_client:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö API ‡∏Å‡πà‡∏≠‡∏ô!")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            try:
                amount = float(self.ai_vars["ai_amount_var"].get())
                max_trades = int(self.ai_vars["ai_max_trades_var"].get())
                
                if amount <= 0 or max_trades <= 0:
                    raise ValueError("‡∏Ñ‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                    
            except ValueError as e:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")
                return
            
            # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading
            if not messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading", 
                                     f"ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading?\n\n"
                                     f"Symbol: {self.ai_vars['ai_symbol_var'].get().upper()}\n"
                                     f"‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå: {self.ai_vars['ai_strategy_var'].get()}\n"
                                     f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {amount:,.2f} THB ‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î\n"
                                     f"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: {self.ai_vars['ai_risk_var'].get()}\n\n"
                                     f"‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ"):
                return
            
            self.start_ai_trading()
        else:
            self.stop_ai_trading()
    
    def start_ai_trading(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading"""
        self.ai_enabled = True
        self.stop_trading = False
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        self.ai_start_button.configure(text="üõë ‡∏´‡∏¢‡∏∏‡∏î AI Trading")
        self.quick_start_btn.configure(text="üõë ‡∏´‡∏¢‡∏∏‡∏î AI")
        self.header_stats["AI Trading"].configure(text="üü¢ ‡πÄ‡∏õ‡∏¥‡∏î")
        self.ai_stats["üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"].configure(text="üü¢ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading Thread
        self.ai_trading_thread = threading.Thread(target=self.ai_trading_loop, daemon=True)
        self.ai_trading_thread.start()
        
        self.log_ai_message("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading!")
        self.log_message("AI Trading ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "SUCCESS")
    
    def stop_ai_trading(self):
        """‡∏´‡∏¢‡∏∏‡∏î AI Trading"""
        self.ai_enabled = False
        self.stop_trading = True
        
        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
        self.ai_start_button.configure(text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI Trading")
        self.quick_start_btn.configure(text="üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° AI")
        self.header_stats["AI Trading"].configure(text="üî¥ ‡∏õ‡∏¥‡∏î")
        self.ai_stats["üîÑ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"].configure(text="üî¥ ‡∏´‡∏¢‡∏∏‡∏î")
        
        self.log_ai_message("üõë ‡∏´‡∏¢‡∏∏‡∏î AI Trading!")
        self.log_message("AI Trading ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "SUCCESS")
    
    def ai_trading_loop(self):
        """‡∏•‡∏π‡∏õ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á AI Trading ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        trades_this_hour = 0
        hour_start = time.time()
        last_trade_time = 0
        min_trade_interval = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        while self.ai_enabled and not self.stop_trading:
            try:
                current_time = time.time()
                
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ô‡∏±‡∏ö‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                if current_time - hour_start > 3600:
                    trades_this_hour = 0
                    hour_start = current_time
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                max_trades = int(self.ai_vars["ai_max_trades_var"].get())
                if trades_this_hour >= max_trades:
                    self.log_ai_message(f"‚è≥ ‡∏ñ‡∏∂‡∏á‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ({max_trades})")
                    time.sleep(300)  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏î
                if current_time - last_trade_time < min_trade_interval:
                    time.sleep(60)
                    continue
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
                if len(self.price_history) < 20:
                    self.log_ai_message("‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°...")
                    time.sleep(30)
                    continue
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î
                signal = self.generate_advanced_trading_signal()
                
                if signal and signal['action'] != 'hold' and signal['confidence'] > 0.6:
                    if self.execute_ai_trade(signal):
                        trades_this_hour += 1
                        last_trade_time = current_time
                        self.total_trades += 1
                        
                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                        self.update_ai_statistics()
                
                # ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                time.sleep(60)
                
            except Exception as e:
                self.log_ai_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô AI: {str(e)}")
                self.log_message(f"AI Trading Error: {str(e)}", "ERROR")
                time.sleep(120)
    
    def generate_advanced_trading_signal(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á"""
        try:
            strategy = self.ai_vars["ai_strategy_var"].get()
            current_price = self.price_history[-1]
            prices = list(self.price_history)
            
            if strategy == "momentum":
                signal = TradingStrategy.momentum_strategy(prices, current_price)
            elif strategy == "bollinger_bands":
                signal = TradingStrategy.bollinger_bands_strategy(prices, current_price)
            elif strategy == "hybrid":
                # ‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
                momentum_signal = TradingStrategy.momentum_strategy(prices, current_price)
                bb_signal = TradingStrategy.bollinger_bands_strategy(prices, current_price)
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
                total_confidence = (momentum_signal['confidence'] + bb_signal['confidence']) / 2
                
                if momentum_signal['action'] == bb_signal['action'] and momentum_signal['action'] != 'hold':
                    signal = {
                        'action': momentum_signal['action'],
                        'confidence': min(0.9, total_confidence * 1.2),  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                        'reason': f"Hybrid: {momentum_signal['reason']} + {bb_signal['reason']}"
                    }
                else:
                    signal = {
                        'action': 'hold',
                        'confidence': 0.3,
                        'reason': "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ô"
                    }
            else:
                signal = {'action': 'hold', 'confidence': 0, 'reason': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå'}
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
            risk_level = self.ai_vars["ai_risk_var"].get()
            risk_adjustments = {"low": 0.7, "medium": 1.0, "high": 1.3, "aggressive": 1.5}
            signal['confidence'] *= risk_adjustments.get(risk_level, 1.0)
            signal['confidence'] = min(0.95, signal['confidence'])  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 95%
            
            self.log_ai_message(f"üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {signal['action']} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {signal['confidence']:.2f}) - {signal['reason']}")
            
            return signal
            
        except Exception as e:
            self.log_ai_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: {str(e)}")
            return None
    
    def execute_ai_trade(self, signal):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÇ‡∏î‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            symbol = self.ai_vars["ai_symbol_var"].get()
            base_amount = float(self.ai_vars["ai_amount_var"].get())
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
            adjusted_amount = base_amount * signal['confidence']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ó‡∏£‡∏î
            max_trade = float(self.setting_vars.get("max_trade_amount", tk.StringVar(value="10000")).get())
            if adjusted_amount > max_trade:
                self.log_ai_message(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà {max_trade:,.2f} THB")
                adjusted_amount = max_trade
            
            if signal['action'] == 'buy':
                return self.ai_place_buy_order(symbol, adjusted_amount, signal)
            elif signal['action'] == 'sell':
                return self.ai_place_sell_order(symbol, adjusted_amount, signal)
            
            return False
            
        except Exception as e:
            self.log_ai_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î: {str(e)}")
            return False
    
    def ai_place_buy_order(self, symbol, amount, signal):
        """‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
            wallet = self.api_client.make_private_request('POST', '/api/v3/market/wallet')
            if not wallet or wallet.get('error') != 0:
                self.log_ai_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
                return False
            
            thb_balance = wallet.get('result', {}).get('THB', 0)
            if thb_balance < amount:
                self.log_ai_message(f"‚ùå ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: ‡∏°‡∏µ {thb_balance:,.2f} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ {amount:,.2f}")
                return False
            
            # ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏ö‡∏ö market order
            body = {
                'sym': symbol,
                'amt': amount,
                'rat': 0,  # Market order
                'typ': 'market'
            }
            
            result = self.api_client.make_private_request('POST', '/api/v3/market/place-bid', body=body)
            
            if result and result.get('error') == 0:
                self.successful_trades += 1
                order_id = result.get('result', {}).get('id', 'N/A')
                
                self.log_ai_message(f"‚úÖ AI ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {amount:,.2f} THB ‡∏Ç‡∏≠‡∏á {symbol.upper()}")
                self.log_ai_message(f"üìã Order ID: {order_id}")
                self.log_message(f"AI Trade: BUY {amount:,.2f} THB of {symbol.upper()}", "TRADE")
                
                return True
            else:
                self.failed_trades += 1
                error = result.get('error', 'Unknown') if result else 'No response'
                self.log_ai_message(f"‚ùå AI ‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Error {error}")
                return False
                
        except Exception as e:
            self.failed_trades += 1
            self.log_ai_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠: {str(e)}")
            return False
    
    def ai_place_sell_order(self, symbol, amount, signal):
        """‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡πÇ‡∏î‡∏¢ AI ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏£‡∏¥‡∏õ‡πÇ‡∏ï
            wallet = self.api_client.make_private_request('POST', '/api/v3/market/wallet')
            if not wallet or wallet.get('error') != 0:
                self.log_ai_message("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ")
                return False
            
            crypto_symbol = symbol.split('_')[0].upper()
            crypto_balance = wallet.get('result', {}).get(crypto_symbol, 0)
            
            if crypto_balance <= 0:
                self.log_ai_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ {crypto_symbol} ‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏¢")
                return False
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ç‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 20% ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ)
            current_price = self.price_history[-1]
            max_sell_amount = crypto_balance * 0.2
            target_sell_amount = amount / current_price
            
            sell_amount = min(max_sell_amount, target_sell_amount, crypto_balance)
            
            if sell_amount < 0.00001:  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
                self.log_ai_message(f"‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {sell_amount:.8f}")
                return False
            
            # ‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö market order
            body = {
                'sym': symbol,
                'amt': sell_amount,
                'rat': 0,  # Market order
                'typ': 'market'
            }
            
            result = self.api_client.make_private_request('POST', '/api/v3/market/place-ask', body=body)
            
            if result and result.get('error') == 0:
                self.successful_trades += 1
                order_id = result.get('result', {}).get('id', 'N/A')
                
                self.log_ai_message(f"‚úÖ AI ‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {sell_amount:.8f} {crypto_symbol}")
                self.log_ai_message(f"üìã Order ID: {order_id}")
                self.log_message(f"AI Trade: SELL {sell_amount:.8f} {crypto_symbol}", "TRADE")
                
                return True
            else:
                self.failed_trades += 1
                error = result.get('error', 'Unknown') if result else 'No response'
                self.log_ai_message(f"‚ùå AI ‡∏Ç‡∏≤‡∏¢‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Error {error}")
                return False
                
        except Exception as e:
            self.failed_trades += 1
            self.log_ai_message(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: {str(e)}")
            return False
    
    def update_ai_statistics(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI Trading"""
        try:
            total_trades = self.successful_trades + self.failed_trades
            success_rate = (self.successful_trades / max(total_trades, 1)) * 100
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó GUI
            self.ai_stats["üéØ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"].configure(text=f"{success_rate:.1f}%")
            self.ai_stats["üìà ‡πÄ‡∏ó‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"].configure(text=str(self.successful_trades))
            self.ai_stats["üìâ ‡πÄ‡∏ó‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"].configure(text=str(self.failed_trades))
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó header stats
            self.header_stats["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ó‡∏£‡∏î"].configure(text=str(total_trades))
            
            self.log_message(f"‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ AI: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {self.successful_trades}/{total_trades} ({success_rate:.1f}%)", "INFO")
            
        except Exception as e:
            self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {str(e)}", "ERROR")
    
    # === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manual Trading ===
    
    def place_order(self, side):
        """‡∏ß‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢ (Manual)"""
        try:
            if not self.api_client:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏Å‡πà‡∏≠‡∏ô")
                return
            
            vars_dict = getattr(self, f'{side}_vars')
            
            symbol = vars_dict[f'{side}_symbol_var'].get()
            amount = float(vars_dict[f'{side}_amount_var'].get())
            rate = float(vars_dict[f'{side}_rate_var'].get()) if vars_dict[f'{side}_rate_var'].get() else 0
            order_type = vars_dict[f'{side}_type_var'].get()
            
            if amount <= 0:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0")
                return
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            max_amount = float(self.setting_vars.get("max_trade_amount", tk.StringVar(value="10000")).get())
            confirm_threshold = float(self.setting_vars.get("confirm_threshold", tk.StringVar(value="5000")).get())
            
            if side == 'buy' and amount > max_amount:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î: {max_amount:,.2f} THB")
                return
            
            # ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
            if side == 'buy' and amount > confirm_threshold:
                if not messagebox.askyesno("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", 
                                         f"‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å!\n\n"
                                         f"üü¢ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ {symbol.upper()}\n"
                                         f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {amount:,.2f} THB\n"
                                         f"‡∏£‡∏≤‡∏Ñ‡∏≤: {rate:,.2f}\n"
                                         f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {order_type.upper()}\n\n"
                                         f"‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£?"):
                    return
            
            # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢
            threading.Thread(target=self._execute_manual_order, 
                           args=(side, symbol, amount, rate, order_type), daemon=True).start()
            
        except ValueError:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    def _execute_manual_order(self, side, symbol, amount, rate, order_type):
        """‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠/‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô background"""
        try:
            body = {
                'sym': symbol,
                'amt': amount,
                'rat': rate,
                'typ': order_type
            }
            
            if side == 'buy':
                result = self.api_client.make_private_request('POST', '/api/v3/market/place-bid', body=body)
                action = "‡∏ã‡∏∑‡πâ‡∏≠"
                emoji = "üü¢"
            else:
                result = self.api_client.make_private_request('POST', '/api/v3/market/place-ask', body=body)
                action = "‡∏Ç‡∏≤‡∏¢"
                emoji = "üî¥"
            
            if result:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                timestamp = datetime.now().strftime("%H:%M:%S")
                self.trading_result.insert(tk.END, f"\n{emoji} === ‡∏ú‡∏•‡∏Å‡∏≤‡∏£{action} [{timestamp}] ===\n")
                self.trading_result.insert(tk.END, json.dumps(result, indent=2, ensure_ascii=False))
                self.trading_result.insert(tk.END, f"\n{'='*60}\n")
                self.trading_result.see(tk.END)
                
                if result.get('error') == 0:
                    order_data = result.get('result', {})
                    order_id = order_data.get('id', 'N/A')
                    
                    self.log_message(f"Manual Trade: {action} {amount:,.2f} {symbol.upper()} - Order ID: {order_id}", "TRADE")
                    messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"üéâ {action}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nOrder ID: {order_id}")
                    
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
                    vars_dict = getattr(self, f'{side}_vars')
                    vars_dict[f'{side}_amount_var'].set("")
                    vars_dict[f'{side}_rate_var'].set("")
                    
                    # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    self.refresh_open_orders()
                    
                else:
                    error_code = result.get('error')
                    self.log_message(f"Manual Trade Failed: {action} - Error {error_code}", "ERROR")
                    messagebox.showerror("‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", f"‚ùå {action}‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!\nError: {error_code}")
            
        except Exception as e:
            self.log_message(f"Manual Trade Error: {str(e)}", "ERROR")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    # === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ===
    
    def quick_start_ai(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏° AI ‡πÅ‡∏ö‡∏ö‡∏î‡πà‡∏ß‡∏ô"""
        if not self.ai_enabled:
            self.toggle_ai_trading()
        else:
            self.stop_ai_trading()
    
    def quick_settings(self):
        """‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô"""
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô")
        settings_window.geometry("400x300")
        settings_window.configure(bg='#1a1a1a')
        
        # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô
        ttk.Label(settings_window, text="‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡πà‡∏ß‡∏ô‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", 
                 style='Header.TLabel').pack(expand=True)
    
    def load_saved_settings(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ"""
        try:
            if 'API' in self.config and self.config['API'].get('configured') == 'True':
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡πÅ‡∏•‡πâ‡∏ß
                self.log_message("‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ", "INFO")
                
        except Exception as e:
            self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {str(e)}", "ERROR")
    
    def save_all_settings(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
            settings_to_save = {}
            
            for var_name, var in self.setting_vars.items():
                if isinstance(var, tk.BooleanVar):
                    settings_to_save[var_name] = var.get()
                else:
                    settings_to_save[var_name] = var.get()
            
            self.config['SETTINGS'] = settings_to_save
            self.save_configuration()
            
            self.log_message("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
            messagebox.showinfo("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
        except Exception as e:
            self.log_message(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: {str(e)}", "ERROR")
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ: {str(e)}")


# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ===
def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Bitkub AI Trading Bot Professional Edition...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
    root = tk.Tk()
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    root.configure(bg='#1a1a1a')
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Application
    app = BitkubTradingBot(root)
    
    # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
    root.update_idletasks()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (1400 // 2)
    y = (screen_height // 2) - (900 // 2)
    root.geometry(f"1400x900+{x}+{y}")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    root.minsize(1200, 700)
    
    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
    app.log_message("üöÄ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Bitkub AI Trading Bot Professional Edition!")
    app.log_message("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API' ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    app.log_message("ü§ñ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå AI Trading ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    app.log_message("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á")
    
    if not MATPLOTLIB_AVAILABLE:
        app.log_message("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á matplotlib ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü", "WARNING")
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    try:
        print("‚úÖ GUI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        root.mainloop()
    except KeyboardInterrupt:
        app.log_message("üëã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
        if app.ai_enabled:
            app.stop_trading = True
        root.quit()
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")


if __name__ == "__main__":
    main()