import pandas as pd
import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
from datetime import datetime
from openpyxl import load_workbook, Workbook
from openpyxl.styles import numbers, Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
import logging
import traceback
import os


# ===== Enhanced Configuration =====
class ConfigManager:
    def __init__(self):
        self.config_file = "mapcost_config.ini"
        self.base_files = {
            'hashira': None,
            'hamada': None
        }
        self.load_config()

    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Base Cost.xlsx ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        self.load_base_cost_file()

    def load_base_cost_file(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Base Cost.xlsx"""
        base_file = "Base Cost.xlsx"
        if os.path.exists(base_file):
            try:
                # ‡∏≠‡πà‡∏≤‡∏ô Hashira Cost sheet
                self.base_files['hashira'] = pd.read_excel(base_file, sheet_name="Hashira Cost")
                if 'MENU NAME' in self.base_files['hashira'].columns:
                    self.base_files['hashira'] = self.base_files['hashira'].set_index("MENU NAME")

                # ‡∏≠‡πà‡∏≤‡∏ô Hamada Cost sheet
                self.base_files['hamada'] = pd.read_excel(base_file, sheet_name="Hamada Cost")
                if 'MENU NAME' in self.base_files['hamada'].columns:
                    self.base_files['hamada'] = self.base_files['hamada'].set_index("MENU NAME")

                logger.info(f"‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå {base_file} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                logger.info(f"Hashira Cost: {len(self.base_files['hashira'])} ‡πÄ‡∏°‡∏ô‡∏π")
                logger.info(f"Hamada Cost: {len(self.base_files['hamada'])} ‡πÄ‡∏°‡∏ô‡∏π")

            except Exception as e:
                logger.error(f"Error loading base file: {e}")
                self.base_files = {'hashira': None, 'hamada': None}


# ===== Modern GUI Styling =====
def configure_modern_style():
    """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢"""
    style = ttk.Style()

    try:
        style.theme_use('clam')
    except:
        style.theme_use('default')

    colors = {
        'bg_primary': '#2c3e50',
        'bg_secondary': '#34495e',
        'accent': '#3498db',
        'success': '#27ae60',
        'warning': '#f39c12',
        'danger': '#e74c3c',
        'light': '#ecf0f1',
        'white': '#ffffff',
        'text_dark': '#2c3e50',
        'text_light': '#ffffff'
    }

    # Configure styles
    style.configure('Title.TLabel', font=('Segoe UI', 16, 'bold'), foreground=colors['text_dark'])
    style.configure('Heading.TLabel', font=('Segoe UI', 12, 'bold'), foreground=colors['accent'])
    style.configure('Status.TLabel', font=('Segoe UI', 10), padding=(5, 2))

    style.configure('Accent.TButton', font=('Segoe UI', 9, 'bold'), padding=(10, 5))
    style.configure('Success.TButton', font=('Segoe UI', 9, 'bold'), padding=(10, 5))
    style.configure('Warning.TButton', font=('Segoe UI', 9, 'bold'), padding=(10, 5))

    style.configure('Card.TFrame', relief='solid', borderwidth=1, padding=10)
    style.configure('Modern.TNotebook', tabposition='n')
    style.configure('Modern.TNotebook.Tab', font=('Segoe UI', 10, 'bold'), padding=(20, 8))

    return colors


# ===== Logging Setup =====
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('hamada_calculator_debug.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== Language System =====
LANGUAGES = {
    'th': {
        'app_title': 'Hamada & Hashira Cost Calculator - Enhanced',
        'select_import_file': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import',
        'calculate': '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì',
        'save_excel': '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel',
        'save_excel_debug': '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel + Debug',
        'check_base_file': '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Base',
        'export_base_file': 'Export ‡πÑ‡∏ü‡∏•‡πå Base',
        'import_new_base': 'Import Base ‡πÉ‡∏´‡∏°‡πà',
        'import_template_file': 'Import Template ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
        'clear_debug': '‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Debug',
        'debug_mode': '‡πÄ‡∏õ‡∏¥‡∏î Debug Mode',
        'select_base_type': '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Base Cost',
        'hashira_cost': 'Hashira Cost',
        'hamada_cost': 'Hamada Cost',
        'no_file_selected': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå',
        'file_selected': '‡πÑ‡∏ü‡∏•‡πå',
        'base_file_ready': '‡πÑ‡∏ü‡∏•‡πå Base: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        'base_file_not_found': '‡πÑ‡∏ü‡∏•‡πå Base: ‡πÑ‡∏°‡πà‡∏û‡∏ö',
        'results_tab': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå',
        'debug_tab': 'Debug Log',
        'statistics': '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
        'no_data': '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        'menu_name': 'MENU NAME',
        'qty': 'Qty',
        'material_cost': 'Material Cost',
        'total_cost': 'Total Cost',
        'grand_total': 'Grand Total',
        'matched_menus': '‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π',
        'not_found_menus': '‡πÑ‡∏°‡πà‡∏û‡∏ö',
        'total_amount': '‡∏£‡∏ß‡∏°',
        'baht': '‡∏ö‡∏≤‡∏ó',
        'error': '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        'warning': '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
        'success': '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        'please_select_file': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import ‡∏Å‡πà‡∏≠‡∏ô',
        'calculation_complete': '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏û‡∏ö',
        'items': '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
        'sheet_results': '‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå',
        'sheet_import_data': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import',
        'sheet_template_data': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template',
        'sheet_base_data': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base Cost',
        'sheet_not_found': '‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö',
        'sheet_summary': '‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•',
        'template_file': '‡πÑ‡∏ü‡∏•‡πå Template'
    }
}

# Initialize configuration
config_manager = ConfigManager()


class EnhancedCostCalculatorApp:
    def __init__(self, root):
        self.root = root
        self.current_language = 'th'
        self.colors = configure_modern_style()

        self.root.title(self.t('app_title'))
        self.root.geometry("1400x900")
        self.root.configure(bg=self.colors['light'])
        self.root.minsize(1200, 800)

        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
        self.import_file = None
        self.template_file = None
        self.selected_base_type = tk.StringVar(value='hamada')  # default
        self.df_result = None
        self.debug_mode = tk.BooleanVar(value=False)

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        self.debug_data = {
            'not_found_menus': [],
            'zero_qty_items': [],
            'invalid_qty_items': [],
            'nan_cost_items': [],
            'matched_menus': [],
            'not_sold_menus': [],
            'processing_summary': {}
        }

        self._build_ui()
        logger.info("Enhanced Cost Calculator initialized")

    def t(self, key):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        return LANGUAGES.get(self.current_language, {}).get(key, key)

    def _build_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÅ‡∏ö‡∏ö Enhanced"""
        # Main container
        main_frame = ttk.Frame(self.root, style='Card.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)

        # Enhanced Header
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 20))

        # Title with modern styling
        title_label = ttk.Label(header_frame, text="üç± Hamada & Hashira Cost Calculator",
                                style='Title.TLabel')
        title_label.pack(pady=(0, 5))

        subtitle = ttk.Label(header_frame, text="Enhanced Multi-Base Cost Management System",
                             font=('Segoe UI', 11), foreground=self.colors['bg_secondary'])
        subtitle.pack()

        # ===== Base Type Selection Card =====
        base_selection_frame = ttk.LabelFrame(main_frame, text="üè™ Base Cost Selection",
                                              padding=15, style='Card.TFrame')
        base_selection_frame.pack(fill=tk.X, pady=(0, 15))

        # Base type radio buttons
        base_frame = ttk.Frame(base_selection_frame)
        base_frame.pack(fill=tk.X)

        ttk.Label(base_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Base Cost:",
                  font=('Segoe UI', 11, 'bold')).pack(side=tk.LEFT, padx=(0, 20))

        # Radio buttons ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å base type
        hashira_radio = ttk.Radiobutton(base_frame, text="üèØ Hashira Cost",
                                        variable=self.selected_base_type, value='hashira',
                                        command=self.on_base_type_change)
        hashira_radio.pack(side=tk.LEFT, padx=10)

        hamada_radio = ttk.Radiobutton(base_frame, text="üçú Hamada Cost",
                                       variable=self.selected_base_type, value='hamada',
                                       command=self.on_base_type_change)
        hamada_radio.pack(side=tk.LEFT, padx=10)

        # Base file status
        self.base_status_label = ttk.Label(base_frame, text="", style='Status.TLabel')
        self.base_status_label.pack(side=tk.RIGHT, padx=20)
        self.update_base_status()

        # ===== File Management Section =====
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ File Management",
                                    padding=15, style='Card.TFrame')
        file_frame.pack(fill=tk.X, pady=(0, 15))

        # File selection buttons - Row 1
        file_btn_frame1 = ttk.Frame(file_frame)
        file_btn_frame1.pack(fill=tk.X, pady=(0, 8))

        ttk.Button(file_btn_frame1, text="üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import",
                   command=self.load_import_file, style='Accent.TButton').pack(
            side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(file_btn_frame1, text="üìÑ Import Template ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                   command=self.load_template_file, style='Warning.TButton').pack(
            side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(file_btn_frame1, text="üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Base",
                   command=self.check_base_file, style='Accent.TButton').pack(
            side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # File selection buttons - Row 2
        file_btn_frame2 = ttk.Frame(file_frame)
        file_btn_frame2.pack(fill=tk.X)

        ttk.Button(file_btn_frame2, text="üì• Import Base Cost ‡πÉ‡∏´‡∏°‡πà",
                   command=self.import_new_base, style='Warning.TButton').pack(
            side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(file_btn_frame2, text="üì§ Export Base Cost",
                   command=self.export_base_file, style='Accent.TButton').pack(
            side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # File status display
        status_frame = ttk.Frame(file_frame)
        status_frame.pack(fill=tk.X, pady=(10, 0))

        self.import_status_label = ttk.Label(status_frame, text="üìÇ Import: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                                             style='Status.TLabel', foreground=self.colors['danger'])
        self.import_status_label.pack(anchor="w", pady=2)

        self.template_status_label = ttk.Label(status_frame, text="üìÑ Template: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå",
                                               style='Status.TLabel', foreground=self.colors['warning'])
        self.template_status_label.pack(anchor="w", pady=2)

        # ===== Action Buttons =====
        action_frame = ttk.LabelFrame(main_frame, text="üöÄ Actions",
                                      padding=15, style='Card.TFrame')
        action_frame.pack(fill=tk.X, pady=(0, 15))

        # Debug mode checkbox
        debug_frame = ttk.Frame(action_frame)
        debug_frame.pack(fill=tk.X, pady=(0, 10))

        self.debug_checkbox = ttk.Checkbutton(debug_frame, text="üîç ‡πÄ‡∏õ‡∏¥‡∏î Debug Mode (‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)",
                                              variable=self.debug_mode)
        self.debug_checkbox.pack(side=tk.LEFT)

        ttk.Button(debug_frame, text="üóëÔ∏è ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå Debug",
                   command=self.clear_debug, style='Warning.TButton').pack(side=tk.RIGHT)

        # Action buttons
        btn_frame = ttk.Frame(action_frame)
        btn_frame.pack(fill=tk.X)

        ttk.Button(btn_frame, text="‚ö° ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì", command=self.calculate,
                   style='Success.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(btn_frame, text="üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel", command=self.export_excel,
                   style='Success.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        ttk.Button(btn_frame, text="üîçüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel + Debug", command=self.export_excel_with_debug,
                   style='Warning.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)

        # ===== Content Area =====
        content_frame = ttk.Frame(main_frame, style='Card.TFrame')
        content_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))

        # Notebook for tabs
        self.notebook = ttk.Notebook(content_frame, style='Modern.TNotebook')
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # ===== Results Tab =====
        result_frame = ttk.Frame(self.notebook)
        self.notebook.add(result_frame, text=f"üìã {self.t('results_tab')}")

        table_frame = ttk.Frame(result_frame, padding=10)
        table_frame.pack(fill=tk.BOTH, expand=True)

        table_header = ttk.Label(table_frame, text="üí∞ Calculation Results",
                                 style='Heading.TLabel')
        table_header.pack(pady=(0, 10))

        # Results table
        self.tree = ttk.Treeview(table_frame, columns=("menu", "qty", "cost", "total"),
                                 show="headings", height=16)

        self.tree.heading("menu", text=f"üçΩÔ∏è {self.t('menu_name')}")
        self.tree.heading("qty", text=f"üìä {self.t('qty')}")
        self.tree.heading("cost", text=f"üíµ {self.t('material_cost')}")
        self.tree.heading("total", text=f"üí∞ {self.t('total_cost')}")

        self.tree.column("menu", width=400, anchor="w")
        self.tree.column("qty", width=100, anchor="center")
        self.tree.column("cost", width=150, anchor="e")
        self.tree.column("total", width=150, anchor="e")

        tree_scroll = ttk.Scrollbar(table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=tree_scroll.set)

        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y, padx=(5, 0))
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # ===== Debug Tab =====
        debug_frame = ttk.Frame(self.notebook)
        self.notebook.add(debug_frame, text=f"üîç {self.t('debug_tab')}")

        debug_header_frame = ttk.Frame(debug_frame, padding=10)
        debug_header_frame.pack(fill=tk.X)

        debug_title = ttk.Label(debug_header_frame, text="üîß Enhanced Debug Console",
                                style='Heading.TLabel')
        debug_title.pack()

        debug_text_frame = ttk.Frame(debug_frame, padding=(10, 0, 10, 10))
        debug_text_frame.pack(fill=tk.BOTH, expand=True)

        self.debug_text = scrolledtext.ScrolledText(debug_text_frame, wrap=tk.WORD, height=18,
                                                    font=('Consolas', 10),
                                                    bg='#1e1e1e', fg='#ffffff',
                                                    insertbackground='#ffffff',
                                                    selectbackground='#3498db',
                                                    relief='flat', borderwidth=0)
        self.debug_text.pack(fill=tk.BOTH, expand=True)

        # ===== Statistics Section =====
        self.stats_frame = ttk.LabelFrame(main_frame, text="üìà Statistics & Info",
                                          padding=15, style='Card.TFrame')
        self.stats_frame.pack(fill=tk.X)

        self.stats_label = ttk.Label(self.stats_frame, text=self.t('no_data'),
                                     style='Status.TLabel',
                                     font=('Segoe UI', 11, 'bold'))
        self.stats_label.pack()

        self._configure_treeview_style()

    def _configure_treeview_style(self):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡πÑ‡∏ï‡∏•‡πå modern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö treeview"""
        style = ttk.Style()

        style.configure('Modern.Treeview',
                        background='#ffffff',
                        foreground='#2c3e50',
                        fieldbackground='#ffffff',
                        font=('Segoe UI', 10))

        style.configure('Modern.Treeview.Heading',
                        background='#3498db',
                        foreground='#ffffff',
                        font=('Segoe UI', 10, 'bold'),
                        relief='flat')

        style.map('Modern.Treeview',
                  background=[('selected', '#3498db')],
                  foreground=[('selected', '#ffffff')])

        self.tree.configure(style='Modern.Treeview')

    def on_base_type_change(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô base type"""
        selected = self.selected_base_type.get()
        self.debug_log(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Base Type ‡πÄ‡∏õ‡πá‡∏ô: {selected.upper()}")
        self.update_base_status()

    def update_base_status(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏•‡πå base"""
        selected = self.selected_base_type.get()
        base_df = config_manager.base_files.get(selected)

        if base_df is not None and not base_df.empty:
            menu_count = len(base_df)
            status_text = f"üóÇÔ∏è {selected.upper()} Cost: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ({menu_count} ‡πÄ‡∏°‡∏ô‡∏π)"
            color = self.colors['success']
        else:
            status_text = f"üóÇÔ∏è {selected.upper()} Cost: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            color = self.colors['danger']

        self.base_status_label.config(text=status_text, foreground=color)

    def debug_log(self, message, level="INFO"):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô debug log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {level}: {message}\n"

        self.debug_text.insert(tk.END, log_message)
        self.debug_text.see(tk.END)

        if level == "ERROR":
            logger.error(message)
        elif level == "WARNING":
            logger.warning(message)
        else:
            logger.info(message)

    def clear_debug(self):
        """‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå debug log"""
        self.debug_text.delete(1.0, tk.END)
        self.debug_log("Debug log cleared")
        self.debug_data = {
            'not_found_menus': [],
            'zero_qty_items': [],
            'invalid_qty_items': [],
            'nan_cost_items': [],
            'matched_menus': [],
            'not_sold_menus': [],
            'processing_summary': {}
        }

    def load_import_file(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå import"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)",
            filetypes=[("Excel Files", "*.xlsx *.xls")]
        )
        if not file_path:
            return

        self.import_file = file_path
        self.import_status_label.config(
            text=f"üìÇ Import: {os.path.basename(file_path)}",
            foreground=self.colors['success']
        )

        self.debug_log(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import: {file_path}")
        self._preview_file(file_path, "Import")

    def load_template_file(self):
        """‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå template ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Template ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
            filetypes=[("Excel Files", "*.xlsx *.xls")]
        )
        if not file_path:
            return

        self.template_file = file_path
        self.template_status_label.config(
            text=f"üìÑ Template: {os.path.basename(file_path)}",
            foreground=self.colors['success']
        )

        self.debug_log(f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Template: {file_path}")
        self._preview_file(file_path, "Template")

    def _preview_file(self, file_path, file_type):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
        try:
            df_preview = pd.read_excel(file_path)
            self.debug_log(f"‡πÑ‡∏ü‡∏•‡πå {file_type} ‡∏°‡∏µ {len(df_preview)} ‡πÅ‡∏ñ‡∏ß, {len(df_preview.columns)} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå")
            self.debug_log(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {df_preview.columns.tolist()}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            required_cols = ["MENU NAME", "Qty"]
            missing_cols = [col for col in required_cols if col not in df_preview.columns]
            if missing_cols:
                self.debug_log(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå {missing_cols}", "WARNING")

            # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.debug_log(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {file_type} 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å:")
            for i, row in df_preview.head(5).iterrows():
                menu = row.get("MENU NAME", "N/A")
                qty = row.get("Qty", "N/A")
                self.debug_log(f"  ‡πÅ‡∏ñ‡∏ß {i + 1}: {menu} = {qty}")

        except Exception as e:
            self.debug_log(f"Error ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_type}: {str(e)}", "ERROR")

    def get_current_base_df(self):
        """‡∏î‡∏∂‡∏á DataFrame ‡∏Ç‡∏≠‡∏á base ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà"""
        selected = self.selected_base_type.get()
        return config_manager.base_files.get(selected)

    def check_base_file(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå base ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        selected = self.selected_base_type.get()
        df_base = self.get_current_base_df()

        if df_base is None:
            messagebox.showerror("Error", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î {selected.upper()} Cost ‡πÑ‡∏î‡πâ")
            return

        self.debug_log(f"=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö {selected.upper()} Cost ===")
        self.debug_log(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π: {len(df_base)}")
        self.debug_log(f"‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {df_base.columns.tolist()}")

        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤
        try:
            if "Material Cost" in df_base.columns:
                # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                df_base.columns = df_base.columns.str.strip()
                cost_column = "Material Cost"

                cost_stats = pd.to_numeric(df_base[cost_column], errors='coerce').describe()
                self.debug_log("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤ Material Cost:")
                self.debug_log(f"  ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {cost_stats['min']:.2f}")
                self.debug_log(f"  ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {cost_stats['max']:.2f}")
                self.debug_log(f"  ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {cost_stats['mean']:.2f}")
                self.debug_log(f"  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {cost_stats['count']}")
        except Exception as e:
            self.debug_log(f"Error ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: {str(e)}", "ERROR")

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π
        self.debug_log(f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ({selected.upper()}):")
        for i, (menu_name, row) in enumerate(df_base.head(10).iterrows()):
            try:
                material_cost = pd.to_numeric(row.get("Material Cost", 0), errors='coerce')
                if pd.isna(material_cost):
                    material_cost = 0
                self.debug_log(f"  {i + 1}. {menu_name}: {material_cost:.2f}")
            except:
                self.debug_log(f"  {i + 1}. {menu_name}: ERROR")

    def calculate(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏ö‡∏ö Enhanced"""
        df_base = self.get_current_base_df()
        selected_base = self.selected_base_type.get()

        if df_base is None:
            messagebox.showerror("Error", f"‡πÑ‡∏ü‡∏•‡πå {selected_base.upper()} Cost ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ")
            return

        if not self.import_file:
            messagebox.showwarning("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Import ‡∏Å‡πà‡∏≠‡∏ô")
            return

        self.debug_log(f"=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏î‡πâ‡∏ß‡∏¢ {selected_base.upper()} Cost ===")

        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå debug data ‡πÄ‡∏Å‡πà‡∏≤
        self.debug_data = {
            'not_found_menus': [],
            'zero_qty_items': [],
            'invalid_qty_items': [],
            'nan_cost_items': [],
            'matched_menus': [],
            'not_sold_menus': [],
            'processing_summary': {}
        }

        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå import
            df_import = pd.read_excel(self.import_file)
            self.debug_log(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df_import)} ‡πÅ‡∏ñ‡∏ß")

            # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            df_base.columns = df_base.columns.str.strip()
            df_import.columns = df_import.columns.str.strip()

        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}"
            self.debug_log(error_msg, "ERROR")
            messagebox.showerror("Error", error_msg)
            return

        results = []
        matched_count = 0

        self.debug_log(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• {len(df_import)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

        for idx, row in df_import.iterrows():
            menu = row.get("MENU NAME")
            qty = row.get("Qty", 0)

            if self.debug_mode.get():
                self.debug_log(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ñ‡∏ß {idx + 1}: {menu} = {qty}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö menu name
            if pd.isna(menu) or menu == "":
                self.debug_log(f"‡πÅ‡∏ñ‡∏ß {idx + 1}: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏ß‡πà‡∏≤‡∏á", "WARNING")
                continue

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quantity
            original_qty = qty
            try:
                qty = float(qty) if not pd.isna(qty) else 0
                if qty == 0:
                    self.debug_data['zero_qty_items'].append({
                        'row': idx + 1,
                        'menu': menu,
                        'original_qty': original_qty
                    })
                    if self.debug_mode.get():
                        self.debug_log(f"‡πÅ‡∏ñ‡∏ß {idx + 1}: Qty = 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {menu}", "WARNING")
            except (ValueError, TypeError):
                self.debug_data['invalid_qty_items'].append({
                    'row': idx + 1,
                    'menu': menu,
                    'invalid_qty': original_qty
                })
                self.debug_log(f"‡πÅ‡∏ñ‡∏ß {idx + 1}: Qty ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ({original_qty}) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {menu}", "WARNING")
                qty = 0

            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô base file
            if menu in df_base.index:
                try:
                    material_cost = df_base.at[menu, "Material Cost"]

                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö material cost
                    if pd.isna(material_cost):
                        self.debug_data['nan_cost_items'].append({
                            'menu': menu,
                            'row': idx + 1
                        })
                        self.debug_log(f"‡πÅ‡∏ñ‡∏ß {idx + 1}: Material Cost ‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {menu}", "WARNING")
                        material_cost = 0
                    else:
                        material_cost = float(material_cost)

                    total_cost = qty * material_cost
                    results.append([menu, qty, material_cost, total_cost])

                    self.debug_data['matched_menus'].append({
                        'row': idx + 1,
                        'menu': menu,
                        'qty': qty,
                        'material_cost': material_cost,
                        'total_cost': total_cost
                    })

                    matched_count += 1

                    if self.debug_mode.get():
                        self.debug_log(f"  ‚úì ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π: {material_cost:.2f} x {qty} = {total_cost:.2f}")

                except Exception as e:
                    self.debug_log(f"Error ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì {menu}: {str(e)}", "ERROR")
            else:
                self.debug_data['not_found_menus'].append({
                    'row': idx + 1,
                    'menu': menu,
                    'qty': qty
                })
                if self.debug_mode.get():
                    self.debug_log(f"  ‚úó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π: {menu}", "WARNING")

        # ‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢
        import_menus = set(df_import["MENU NAME"].dropna().tolist())
        base_menus = set(df_base.index.tolist())
        not_sold_menus = base_menus - import_menus

        self.debug_data['not_sold_menus'] = []
        for menu in not_sold_menus:
            try:
                cost = df_base.at[menu, "Material Cost"]
                if pd.isna(cost):
                    cost = 0
                else:
                    cost = float(cost)

                self.debug_data['not_sold_menus'].append({
                    'menu': menu,
                    'material_cost': cost
                })
            except:
                self.debug_data['not_sold_menus'].append({
                    'menu': menu,
                    'material_cost': 0
                })

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        self.debug_data['processing_summary'] = {
            'total_rows': len(df_import),
            'matched_count': matched_count,
            'not_found_count': len(self.debug_data['not_found_menus']),
            'zero_qty_count': len(self.debug_data['zero_qty_items']),
            'invalid_qty_count': len(self.debug_data['invalid_qty_items']),
            'nan_cost_count': len(self.debug_data['nan_cost_items']),
            'not_sold_count': len(self.debug_data['not_sold_menus']),
            'base_type': selected_base.upper(),
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        self.debug_log(f"=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ({selected_base.upper()}) ===")
        summary = self.debug_data['processing_summary']
        self.debug_log(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary['total_rows']}")
        self.debug_log(f"‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: {summary['matched_count']}")
        self.debug_log(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π: {summary['not_found_count']}")
        self.debug_log(f"Qty = 0: {summary['zero_qty_count']}")
        self.debug_log(f"Qty ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {summary['invalid_qty_count']}")
        self.debug_log(f"Material Cost NaN: {summary['nan_cost_count']}")
        self.debug_log(f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢: {summary['not_sold_count']}")

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        self.df_result = pd.DataFrame(results, columns=["MENU NAME", "Qty", "Material Cost", "Total Cost"])

        if self.df_result.empty:
            error_msg = f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö {selected_base.upper()} Cost"
            self.debug_log(error_msg, "WARNING")
            messagebox.showwarning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", error_msg)
            return

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Grand Total
        grand_total = self.df_result["Total Cost"].sum()
        self.debug_log(f"Grand Total: {grand_total:.2f}")

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß Grand Total
        grand_total_row = pd.DataFrame([["Grand Total", "", "", grand_total]],
                                       columns=["MENU NAME", "Qty", "Material Cost", "Total Cost"])
        self.df_result = pd.concat([self.df_result, grand_total_row], ignore_index=True)

        # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        self._update_result_table()

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        self._update_statistics(matched_count, summary['not_found_count'], grand_total, selected_base)

        success_msg = f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô - ‡∏û‡∏ö {matched_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ {selected_base.upper()} Cost)"
        self.debug_log(success_msg)
        messagebox.showinfo("Success", success_msg)

    def _update_result_table(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        # ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤
        for row in self.tree.get_children():
            self.tree.delete(row)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        for _, r in self.df_result.iterrows():
            qty_display = int(r["Qty"]) if r["Qty"] != "" else ""
            cost_display = f"{r['Material Cost']:.2f}" if r["Material Cost"] != "" else ""
            total_display = f"{r['Total Cost']:.2f}" if r["Total Cost"] != "" else ""

            # ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏ñ‡∏ß Grand Total
            tags = ("grand_total",) if r["MENU NAME"] == "Grand Total" else ()

            self.tree.insert("", tk.END,
                             values=(r["MENU NAME"], qty_display, cost_display, total_display),
                             tags=tags)

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß Grand Total
        self.tree.tag_configure("grand_total",
                                background="#3498db",
                                foreground="#ffffff",
                                font=("Segoe UI", 10, "bold"))

    def _update_statistics(self, matched, not_found, grand_total, base_type):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        stats_text = (f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π: {matched} | ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö: {not_found} | "
                      f"üí∞ ‡∏£‡∏ß‡∏°: {grand_total:,.2f} ‡∏ö‡∏≤‡∏ó | üè™ Base: {base_type.upper()}")
        self.stats_label.config(text=stats_text)

    def export_excel(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥"""
        if self.df_result is None or self.df_result.empty:
            messagebox.showwarning("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return

        selected_base = self.selected_base_type.get()
        default_name = f"Cost_Calculation_{selected_base.upper()}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"

        file_path = filedialog.asksaveasfilename(
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå",
            defaultextension=".xlsx",
            initialname=default_name,
            filetypes=[("Excel Files", "*.xlsx")]
        )
        if not file_path:
            return

        try:
            df_export = self.df_result.copy()
            df_export.to_excel(file_path, index=False)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel
            wb = load_workbook(file_path)
            ws = wb.active

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header
            for cell in ws[1]:
                cell.font = Font(bold=True)
                cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            for row in ws.iter_rows(min_row=2):
                if len(row) >= 3 and isinstance(row[2].value, (int, float)):
                    row[2].number_format = numbers.FORMAT_NUMBER_COMMA_SEPARATED1
                if len(row) >= 4 and isinstance(row[3].value, (int, float)):
                    row[3].number_format = numbers.FORMAT_NUMBER_COMMA_SEPARATED1

            # ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡πÅ‡∏ñ‡∏ß Grand Total
            for row in ws.iter_rows(min_row=2):
                if row[0].value == "Grand Total":
                    for cell in row:
                        cell.font = Font(bold=True)
                        cell.fill = PatternFill(start_color="FFFF99", end_color="FFFF99", fill_type="solid")

            wb.save(file_path)

            success_msg = f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {os.path.basename(file_path)}"
            self.debug_log(success_msg)
            messagebox.showinfo("Success", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà:\n{file_path}")

        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}"
            self.debug_log(error_msg, "ERROR")
            messagebox.showerror("Error", error_msg)

    def export_excel_with_debug(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Excel ‡∏û‡∏£‡πâ‡∏≠‡∏° Debug sheets ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""
        if self.df_result is None or self.df_result.empty:
            messagebox.showwarning("Warning", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
            return

        selected_base = self.selected_base_type.get()
        default_name = f"Cost_Calculation_Debug_{selected_base.upper()}_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx"

        file_path = filedialog.asksaveasfilename(
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° Debug",
            defaultextension=".xlsx",
            initialname=default_name,
            filetypes=[("Excel Files", "*.xlsx")]
        )
        if not file_path:
            return

        self.debug_log("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° Debug ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ===")

        try:
            wb = Workbook()

            # Sheet 1: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
            ws_main = wb.active
            ws_main.title = "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"

            df_export = self.df_result.copy()
            df_export["Material Cost"] = pd.to_numeric(df_export["Material Cost"], errors="coerce").round(2)
            df_export["Total Cost"] = pd.to_numeric(df_export["Total Cost"], errors="coerce").round(2)

            for r in dataframe_to_rows(df_export, index=False, header=True):
                ws_main.append(r)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Sheet ‡∏´‡∏•‡∏±‡∏Å
            self._format_main_sheet(ws_main)

            # Sheet 2: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import
            if self.import_file:
                self._add_import_data_sheet(wb)

            # Sheet 3: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if self.template_file:
                self._add_template_data_sheet(wb)

            # Sheet 4: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base Cost ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            self._add_base_data_sheet(wb)

            # Sheet 5: ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö
            if self.debug_data['not_found_menus']:
                self._add_not_found_sheet(wb)

            # Sheet 6: ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
            self._add_summary_sheet(wb)

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            self._adjust_column_width(wb)

            wb.save(file_path)

            success_msg = f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° Debug ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {os.path.basename(file_path)}"
            self.debug_log(success_msg)

            sheet_info = f"‡∏™‡∏£‡πâ‡∏≤‡∏á {len(wb.worksheets)} sheets:\n"
            for ws in wb.worksheets:
                sheet_info += f"- {ws.title}\n"

            messagebox.showinfo("Success", f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏û‡∏£‡πâ‡∏≠‡∏° Debug ‡πÅ‡∏•‡πâ‡∏ß:\n{file_path}\n\n{sheet_info}")

        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}"
            self.debug_log(error_msg, "ERROR")
            self.debug_log(traceback.format_exc(), "ERROR")
            messagebox.showerror("Error", error_msg)

    def _add_import_data_sheet(self, wb):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import"""
        try:
            df_import = pd.read_excel(self.import_file)
            ws_import = wb.create_sheet("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡∏û‡∏¥‡πÄ‡∏®‡∏©
            ws_import.append(["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"])
            ws_import.append([f"‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(self.import_file)}"])
            ws_import.append([f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"])
            ws_import.append([])  # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for r in dataframe_to_rows(df_import, index=False, header=True):
                ws_import.append(r)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            ws_import[1][0].font = Font(bold=True, size=14)
            ws_import[1][0].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            header_row = 5  # ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô header ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for cell in ws_import[header_row]:
                if cell.value:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            self.debug_log("‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Import ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        except Exception as e:
            self.debug_log(f"Error ‡πÄ‡∏û‡∏¥‡πà‡∏° Import sheet: {e}", "ERROR")

    def _add_template_data_sheet(self, wb):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template"""
        try:
            df_template = pd.read_excel(self.template_file)
            ws_template = wb.create_sheet("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡∏û‡∏¥‡πÄ‡∏®‡∏©
            ws_template.append(["‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"])
            ws_template.append([f"‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(self.template_file)}"])
            ws_template.append([f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"])
            ws_template.append([])

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            for r in dataframe_to_rows(df_template, index=False, header=True):
                ws_template.append(r)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            ws_template[1][0].font = Font(bold=True, size=14)
            ws_template[1][0].fill = PatternFill(start_color="F0E6FF", end_color="F0E6FF", fill_type="solid")

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            header_row = 5
            for cell in ws_template[header_row]:
                if cell.value:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            self.debug_log("‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Template ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        except Exception as e:
            self.debug_log(f"Error ‡πÄ‡∏û‡∏¥‡πà‡∏° Template sheet: {e}", "ERROR")

    def _add_base_data_sheet(self, wb):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base Cost ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ"""
        try:
            selected_base = self.selected_base_type.get()
            df_base = self.get_current_base_df()

            if df_base is None:
                return

            ws_base = wb.create_sheet(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selected_base.upper()} Cost")

            # ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡∏û‡∏¥‡πÄ‡∏®‡∏©
            ws_base.append([f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selected_base.upper()} Cost ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì"])
            ws_base.append([f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {selected_base.upper()} Cost"])
            ws_base.append([f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π: {len(df_base)}"])
            ws_base.append([f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"])
            ws_base.append([])

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• base (reset index ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ MENU NAME ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
            df_base_export = df_base.reset_index()
            for r in dataframe_to_rows(df_base_export, index=False, header=True):
                ws_base.append(r)

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            ws_base[1][0].font = Font(bold=True, size=14)
            ws_base[1][0].fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")

            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            header_row = 6
            for cell in ws_base[header_row]:
                if cell.value:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

            self.debug_log(f"‡πÄ‡∏û‡∏¥‡πà‡∏° Sheet ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {selected_base.upper()} Cost ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        except Exception as e:
            self.debug_log(f"Error ‡πÄ‡∏û‡∏¥‡πà‡∏° Base sheet: {e}", "ERROR")

    def _add_not_found_sheet(self, wb):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö"""
        ws_not_found = wb.create_sheet("‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö")

        # Header
        ws_not_found.append(["‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])
        ws_not_found.append([f"Base Cost: {self.debug_data['processing_summary']['base_type']}"])
        ws_not_found.append([])
        ws_not_found.append(["‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"])

        # Header formatting
        for i in range(1, 5):
            if i <= 2:
                ws_not_found[i][0].font = Font(bold=True, size=12)
                ws_not_found[i][0].fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")
            elif i == 4:
                for j, cell in enumerate(ws_not_found[i]):
                    if cell.value:
                        cell.font = Font(bold=True)
                        cell.fill = PatternFill(start_color="FFCCCC", end_color="FFCCCC", fill_type="solid")

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for item in self.debug_data['not_found_menus']:
            ws_not_found.append([item['row'], item['menu'], item['qty']])

    def _add_summary_sheet(self, wb):
        """‡πÄ‡∏û‡∏¥‡πà‡∏° sheet ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"""
        ws_summary = wb.create_sheet("‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")

        summary = self.debug_data['processing_summary']

        summary_data = [
            ["üîç ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• - Enhanced Version", ""],
            ["", ""],
            ["üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", ""],
            ["Base Cost ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ", summary['base_type']],
            ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", summary['total_rows']],
            ["‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", summary['matched_count']],
            ["‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π", summary['not_found_count']],
            ["Qty = 0", summary['zero_qty_count']],
            ["Qty ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", summary['invalid_qty_count']],
            ["Material Cost NaN", summary['nan_cost_count']],
            ["‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢", summary['not_sold_count']],
            ["", ""],
            ["üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", ""],
            ["‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", summary['timestamp']],
            ["‡πÑ‡∏ü‡∏•‡πå Import", os.path.basename(self.import_file) if self.import_file else "N/A"],
            ["‡πÑ‡∏ü‡∏•‡πå Template", os.path.basename(self.template_file) if self.template_file else "‡πÑ‡∏°‡πà‡∏°‡∏µ"],
            ["", ""],
        ]

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏û‡∏ö
        if self.debug_data['matched_menus']:
            summary_data.append(["‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏û‡∏ö", ""])
            summary_data.append(["‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô", "‡∏£‡∏ß‡∏°"])
            for item in self.debug_data['matched_menus']:
                summary_data.append([
                    item['row'],
                    item['menu'],
                    item['qty'],
                    f"{item['material_cost']:.2f}",
                    f"{item['total_cost']:.2f}"
                ])
            summary_data.append(["", "", "", "", ""])

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö
        if self.debug_data['not_found_menus']:
            summary_data.append(["‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö", ""])
            summary_data.append(["‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"])
            for item in self.debug_data['not_found_menus']:
                summary_data.append([item['row'], item['menu'], item['qty']])
            summary_data.append(["", "", ""])

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢
        if self.debug_data['not_sold_menus']:
            summary_data.append(["üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢ (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Base ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Import)", ""])
            summary_data.append(["‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π", "‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô"])
            for item in self.debug_data['not_sold_menus']:
                summary_data.append([item['menu'], f"{item['material_cost']:.2f}"])

        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á sheet
        for row_data in summary_data:
            ws_summary.append(row_data)

        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö summary sheet
        self._format_summary_sheet(ws_summary)

    def _format_main_sheet(self, ws):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö sheet ‡∏´‡∏•‡∏±‡∏Å"""
        # Header formatting
        for cell in ws[1]:
            cell.font = Font(bold=True)
            cell.fill = PatternFill(start_color="CCCCCC", end_color="CCCCCC", fill_type="solid")

        # Number formatting
        for row in ws.iter_rows(min_row=2):
            if len(row) >= 3 and isinstance(row[2].value, (int, float)):
                row[2].number_format = numbers.FORMAT_NUMBER_COMMA_SEPARATED1
            if len(row) >= 4 and isinstance(row[3].value, (int, float)):
                row[3].number_format = numbers.FORMAT_NUMBER_COMMA_SEPARATED1

        # Highlight Grand Total row
        for row in ws.iter_rows(min_row=2):
            if row[0].value == "Grand Total":
                for cell in row:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="FFFF99", end_color="FFFF99", fill_type="solid")

    def _format_summary_sheet(self, ws):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö summary sheet"""
        # Main title
        ws[1][0].font = Font(bold=True, size=14)
        ws[1][0].fill = PatternFill(start_color="CCFFCC", end_color="CCFFCC", fill_type="solid")

        # Section headers
        for row_idx, row in enumerate(ws.iter_rows(), 1):
            if row[0].value in ["üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ", "üìÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
                                "‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏û‡∏ö", "‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö",
                                "üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ç‡∏≤‡∏¢ (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Base ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô Import)"]:
                row[0].font = Font(bold=True, size=12)
                row[0].fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")

    def _adjust_column_width(self, wb):
        """‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå"""
        for ws in wb.worksheets:
            for column in ws.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 60)
                ws.column_dimensions[column_letter].width = adjusted_width

    def import_new_base(self):
        """Import ‡πÑ‡∏ü‡∏•‡πå Base Cost ‡πÉ‡∏´‡∏°‡πà"""
        file_path = filedialog.askopenfilename(
            title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå Base Cost ‡πÉ‡∏´‡∏°‡πà",
            filetypes=[("Excel Files", "*.xlsx *.xls")]
        )
        if not file_path:
            return

        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ sheet
            excel_file = pd.ExcelFile(file_path)
            self.debug_log(f"‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Base ‡πÉ‡∏´‡∏°‡πà: {os.path.basename(file_path)}")
            self.debug_log(f"Sheets ‡∏ó‡∏µ‡πà‡∏°‡∏µ: {excel_file.sheet_names}")

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            required_sheets = ["Hashira Cost", "Hamada Cost"]
            found_sheets = []

            for sheet in required_sheets:
                if sheet in excel_file.sheet_names:
                    found_sheets.append(sheet)
                    try:
                        df_sheet = pd.read_excel(file_path, sheet_name=sheet)

                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                        if "MENU NAME" not in df_sheet.columns:
                            self.debug_log(f"Sheet {sheet} ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå MENU NAME", "ERROR")
                            continue

                        # ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                        df_sheet.columns = df_sheet.columns.str.strip()
                        df_sheet = df_sheet.set_index("MENU NAME")

                        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó config
                        if sheet == "Hashira Cost":
                            config_manager.base_files['hashira'] = df_sheet
                        elif sheet == "Hamada Cost":
                            config_manager.base_files['hamada'] = df_sheet

                        self.debug_log(f"‡πÇ‡∏´‡∏•‡∏î {sheet} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(df_sheet)} ‡πÄ‡∏°‡∏ô‡∏π")

                    except Exception as e:
                        self.debug_log(f"Error ‡πÇ‡∏´‡∏•‡∏î sheet {sheet}: {e}", "ERROR")

            if found_sheets:
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status
                self.update_base_status()

                success_msg = f"‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÑ‡∏ü‡∏•‡πå Base ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\nSheets ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î: {', '.join(found_sheets)}"
                self.debug_log(success_msg)
                messagebox.showinfo("Success", success_msg)
            else:
                error_msg = "‡πÑ‡∏°‡πà‡∏û‡∏ö Sheet ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (Hashira Cost, Hamada Cost)"
                self.debug_log(error_msg, "ERROR")
                messagebox.showerror("Error", error_msg)

        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡πÑ‡∏ü‡∏•‡πå Base ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: {str(e)}"
            self.debug_log(error_msg, "ERROR")
            self.debug_log(traceback.format_exc(), "ERROR")
            messagebox.showerror("Error", error_msg)

    def export_base_file(self):
        """Export ‡πÑ‡∏ü‡∏•‡πå Base Cost ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if not any(config_manager.base_files.values()):
            messagebox.showerror("Error", "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Base Cost ‡πÉ‡∏´‡πâ export")
            return

        file_path = filedialog.asksaveasfilename(
            title="Export Base Cost Files",
            defaultextension=".xlsx",
            initialname=f"Base_Cost_Export_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            filetypes=[("Excel Files", "*.xlsx")]
        )
        if not file_path:
            return

        try:
            wb = Workbook()
            # ‡∏•‡∏ö sheet default
            wb.remove(wb.active)

            sheets_created = 0

            # Export Hashira Cost
            if config_manager.base_files['hashira'] is not None:
                ws_hashira = wb.create_sheet("Hashira Cost")
                df_hashira = config_manager.base_files['hashira'].reset_index()

                for r in dataframe_to_rows(df_hashira, index=False, header=True):
                    ws_hashira.append(r)

                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header
                for cell in ws_hashira[1]:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="E6F3FF", end_color="E6F3FF", fill_type="solid")

                sheets_created += 1
                self.debug_log(f"Export Hashira Cost: {len(df_hashira)} ‡πÄ‡∏°‡∏ô‡∏π")

            # Export Hamada Cost
            if config_manager.base_files['hamada'] is not None:
                ws_hamada = wb.create_sheet("Hamada Cost")
                df_hamada = config_manager.base_files['hamada'].reset_index()

                for r in dataframe_to_rows(df_hamada, index=False, header=True):
                    ws_hamada.append(r)

                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header
                for cell in ws_hamada[1]:
                    cell.font = Font(bold=True)
                    cell.fill = PatternFill(start_color="E6FFE6", end_color="E6FFE6", fill_type="solid")

                sheets_created += 1
                self.debug_log(f"Export Hamada Cost: {len(df_hamada)} ‡πÄ‡∏°‡∏ô‡∏π")

            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
            self._adjust_column_width(wb)

            wb.save(file_path)

            success_msg = f"Export ‡πÑ‡∏ü‡∏•‡πå Base ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {os.path.basename(file_path)}"
            self.debug_log(success_msg)
            messagebox.showinfo("Success", f"Export ‡πÑ‡∏ü‡∏•‡πå Base ‡πÅ‡∏•‡πâ‡∏ß ({sheets_created} sheets):\n{file_path}")

        except Exception as e:
            error_msg = f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ export ‡πÑ‡∏ü‡∏•‡πå Base ‡πÑ‡∏î‡πâ: {str(e)}"
            self.debug_log(error_msg, "ERROR")
            messagebox.showerror("Error", error_msg)


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
    try:
        root = tk.Tk()

        # Set modern window styling
        try:
            root.iconphoto(True, tk.PhotoImage(data=''))
        except:
            pass

        app = EnhancedCostCalculatorApp(root)
        logger.info("Starting Enhanced Cost Calculator")
        root.mainloop()

    except Exception as e:
        logger.error(f"Critical error in main: {str(e)}")
        logger.error(traceback.format_exc())
        messagebox.showerror("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á:\n{str(e)}")


if __name__ == "__main__":
    main()